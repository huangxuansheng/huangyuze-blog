import{_ as n,o as s,c as a,b as t}from"./app-VnZbzlub.js";const p={},e=t(`<h1 id="dart入门基础知识" tabindex="-1"><a class="header-anchor" href="#dart入门基础知识" aria-hidden="true">#</a> Dart入门基础知识</h1><h2 id="_1-入口方法" tabindex="-1"><a class="header-anchor" href="#_1-入口方法" aria-hidden="true">#</a> 1.入口方法</h2><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;hello dart&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//void代表没有返回值</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;hello dart&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-dart变量" tabindex="-1"><a class="header-anchor" href="#_2-dart变量" aria-hidden="true">#</a> <strong>2.Dart变量</strong></h2><p>dart是一种强大的脚本语言，可以不预先定义变量的类型，dart会自动类型推导</p><p>可以通过var的关键字声明变量，也可通过显式类型来声明</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>如：
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;i am dart&#39;</span></span><span class="token punctuation">;</span>
    string str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;i am dart&#39;</span></span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>
    int str <span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>

注意： <span class="token keyword">var</span>关键字和具体类型不要同时写，如：<span class="token keyword">var</span> int str <span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>   报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-dart的命名规则" tabindex="-1"><a class="header-anchor" href="#_3-dart的命名规则" aria-hidden="true">#</a> <strong>3.Dart的命名规则</strong></h2><p>1）.变量名称必须有数字，字母，下划线，和美元符号（$）组成</p><p>2）.标识符的开头不能是数字开头</p><p>3）.标识符不能使用关键字和保留字</p><p>4）.变量的名称是会区分大小写的</p><p>5）.定义标识符的时候意思要尽量明朗，通常变量的名称使用名词，方法的名称使用动词</p><h2 id="_4-dart-常量" tabindex="-1"><a class="header-anchor" href="#_4-dart-常量" aria-hidden="true">#</a> <strong>4.Dart 常量</strong></h2><p>Dart的常量使用final 和const修饰</p><p>const修饰的常量在一开始的时候就需要赋值（编译的时候就已经赋好值了）</p><p>final修饰的常量可以在一开始的时候不赋值，但同样只能赋值一次（惰性赋值，运行时第一次使用时赋值）</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//const常量</span>
<span class="token keyword">const</span> PI<span class="token operator">=</span><span class="token number">3.14159</span>；
PI<span class="token operator">=</span><span class="token number">3</span>；               <span class="token comment">//错误，常量的值不能修改了</span>

<span class="token comment">//final常量</span>
<span class="token keyword">final</span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//给a运行时赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-数据类型" tabindex="-1"><a class="header-anchor" href="#_5-数据类型" aria-hidden="true">#</a> <strong>5.数据类型：</strong></h2><p>常用的数据类型：</p><p>1）.Numbers（数值）：int,double</p><p>2）.Strings(字符串) ： String</p><p>3）.Booleans（布尔） ： bool</p><p>4）.List（数组） ： 在Dart中数组是列表对象</p><p>5）.Maps（字典） ： Map为键值对相关对象</p><h3 id="_5-1-数值类型" tabindex="-1"><a class="header-anchor" href="#_5-1-数值类型" aria-hidden="true">#</a> <strong>5.1 数值类型</strong></h3><h4 id="_5-1-1-int-整型" tabindex="-1"><a class="header-anchor" href="#_5-1-1-int-整型" aria-hidden="true">#</a> 5.1.1 int 整型</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-1-2-double-浮点型" tabindex="-1"><a class="header-anchor" href="#_5-1-2-double-浮点型" aria-hidden="true">#</a> 5.1.2 double 浮点型</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>double b <span class="token operator">=</span> <span class="token number">2.5</span> <span class="token punctuation">;</span>
double b <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span>    <span class="token comment">// 给浮点型变量赋值整型不会报错,但输出的结果会自动补小数点后的0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-1-3-运算符" tabindex="-1"><a class="header-anchor" href="#_5-1-3-运算符" aria-hidden="true">#</a> 5.1.3 运算符</h4><p>运算符有加减乘除余，相对应 +，-，*，/，%; 取整~/</p><h3 id="_5-2-字符串类型" tabindex="-1"><a class="header-anchor" href="#_5-2-字符串类型" aria-hidden="true">#</a> <strong>5.2 字符串类型</strong></h3><p>1）可以用单引号，也可以用双引号</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39; i am str1&#39;</span></span><span class="token punctuation">;</span>
或  <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39; i am str1&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;i am str2&quot;</span></span><span class="token punctuation">;</span>
或 <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;i am str2&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）三引号</p><p>使用三引号定义字符串可以换行</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> str3<span class="token operator">=</span><span class="token string-literal"><span class="token string">&#39;&#39;&#39;
i am str1
i am str2
i am str3&#39;&#39;&#39;</span></span><span class="token punctuation">;</span>

或：
<span class="token class-name">String</span> str3<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;&quot;&quot;
i am str1
i am str2
i am str3&quot;&quot;&quot;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）字符串拼接</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">str1</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">str2</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-布尔类型" tabindex="-1"><a class="header-anchor" href="#_5-3-布尔类型" aria-hidden="true">#</a> <strong>5.3 布尔类型</strong></h3><p>5.3.1 bool</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>bool b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
bool b2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>5.3.2 条件判断语句</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> b1<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;true&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;false&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-list集合类型" tabindex="-1"><a class="header-anchor" href="#_5-4-list集合类型" aria-hidden="true">#</a> <strong>5.4 List集合类型</strong></h3><h4 id="_5-4-1-第一种定义list的方式" tabindex="-1"><a class="header-anchor" href="#_5-4-1-第一种定义list的方式" aria-hidden="true">#</a> 5.4.1 第一种定义List的方式</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> l1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;a&#39;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&#39;b&#39;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&#39;c&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 输出[a, b, c]</span>
<span class="token function">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出3</span>
<span class="token function">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-4-2-第二种定义list的方式" tabindex="-1"><a class="header-anchor" href="#_5-4-2-第二种定义list的方式" aria-hidden="true">#</a> 5.4.2 第二种定义List的方式</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> l2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;three&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出[one, two, three]</span>
<span class="token function">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出3 </span>
<span class="token function">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出one</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_5-4-3-指定list的类型" tabindex="-1"><a class="header-anchor" href="#_5-4-3-指定list的类型" aria-hidden="true">#</a> 5.4.3 指定list的类型</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> l2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><h3 id="_5-5-maps类型" tabindex="-1"><a class="header-anchor" href="#_5-5-maps类型" aria-hidden="true">#</a> <strong>5.5 maps类型</strong></h3><h4 id="_5-5-1-第一种定义方式" tabindex="-1"><a class="header-anchor" href="#_5-5-1-第一种定义方式" aria-hidden="true">#</a> 5.5.1 第一种定义方式</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> persion<span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;Dart&quot;</span></span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">:</span><span class="token string-literal"><span class="token string">&quot;8&quot;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>persion<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//输出 {name: Dart, age: 8}</span>
<span class="token function">print</span><span class="token punctuation">(</span>persion<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出 Dart</span>
<span class="token function">print</span><span class="token punctuation">(</span>persion<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;age&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//输出 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_5-5-2-第二种定义方式" tabindex="-1"><a class="header-anchor" href="#_5-5-2-第二种定义方式" aria-hidden="true">#</a> 5.5.2 第二种定义方式</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> persion1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
persion1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;张三&quot;</span></span><span class="token punctuation">;</span>
persion1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;9&quot;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>persion1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//输出 {name: 张三, age: 9}</span>
<span class="token function">print</span><span class="token punctuation">(</span>persion1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出 张三</span>
<span class="token function">print</span><span class="token punctuation">(</span>persion1<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;age&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//输出 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-类型判断-is-关键字" tabindex="-1"><a class="header-anchor" href="#_5-6-类型判断-is-关键字" aria-hidden="true">#</a> <strong>5.6 类型判断（is 关键字）</strong></h3><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;111&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">is</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;str is String type&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">is</span> int<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;str is int type&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;str is other type&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 ： 输出 str is String type</p></blockquote><h2 id="_6-运算符" tabindex="-1"><a class="header-anchor" href="#_6-运算符" aria-hidden="true">#</a> <strong>6.运算符</strong></h2><p>1）算数运算符</p><p>2）关系运算符</p><p>3）逻辑运算符</p><p>4）赋值运算符</p><p>5）条件表达式</p><p>6）类型转换</p><p><strong>6.1 算数运算符</strong></p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
int b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
 
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//减</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//乘</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//除</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//取余</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">~/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取整</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token number">1</span>
<span class="token number">20</span>
<span class="token number">1.25</span>
<span class="token number">1</span>
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_6-2-关系运算符" tabindex="-1"><a class="header-anchor" href="#_6-2-关系运算符" aria-hidden="true">#</a> 6.2 关系运算符</h3><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>
int b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
 
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//是否相等</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//是否不相等</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//是否大于</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//是否小于</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">&gt;=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//是否大于或者等于</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是否小于或者等于</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>false true true false true false</p></blockquote><h3 id="_6-3逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_6-3逻辑运算符" aria-hidden="true">#</a> <strong>6.3逻辑运算符</strong></h3><h4 id="_6-3-1-取反" tabindex="-1"><a class="header-anchor" href="#_6-3-1-取反" aria-hidden="true">#</a> 6.3.1 取反（！）</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> b <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//输出为true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_6-3-2-且运算" tabindex="-1"><a class="header-anchor" href="#_6-3-2-且运算" aria-hidden="true">#</a> 6.3.2 且运算（&amp;&amp;）</h4><p>当且仅当所有的值都为true的时候，结果才为true，否则为false</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-3-或运算" tabindex="-1"><a class="header-anchor" href="#_6-3-3-或运算" aria-hidden="true">#</a> 6.3.3 或运算（ | | ）</h4><p>只要有一个值为true，则结果为true</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">||</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-赋值运算" tabindex="-1"><a class="header-anchor" href="#_6-4-赋值运算" aria-hidden="true">#</a> <strong>6.4 赋值运算</strong></h3><h4 id="_6-4-1-直接赋值" tabindex="-1"><a class="header-anchor" href="#_6-4-1-直接赋值" aria-hidden="true">#</a> 6.4.1 直接赋值（=）</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-4-2-判断为空之后赋值" tabindex="-1"><a class="header-anchor" href="#_6-4-2-判断为空之后赋值" aria-hidden="true">#</a> 6.4.2 判断为空之后赋值（？？=）</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int b<span class="token punctuation">;</span>
  b<span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>   <span class="token comment">//当 b在这之前没有被赋值，则在这行代码中会被赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-3-复合赋值运算符" tabindex="-1"><a class="header-anchor" href="#_6-4-3-复合赋值运算符" aria-hidden="true">#</a> 6.4.3 复合赋值运算符（+=，-=，*=，/=，%=，~/=）</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
b <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_6-5-2-switch-case" tabindex="-1"><a class="header-anchor" href="#_6-5-2-switch-case" aria-hidden="true">#</a> 6.5.2 switch case</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;boy&quot;</span></span><span class="token punctuation">;</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;boy&quot;</span></span> <span class="token punctuation">:</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;boy&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;girl&quot;</span></span><span class="token punctuation">:</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;girl&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;传入的参数错误&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
结果 ： boy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-3-三目运算" tabindex="-1"><a class="header-anchor" href="#_6-5-3-三目运算" aria-hidden="true">#</a> 6.5.3 三目运算（ ？ ：）</h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>解释：当等号<span class="token operator">=</span>后的变量为<span class="token boolean">true</span>时，给变量赋值 ： 前面的值，当flag为<span class="token boolean">false</span>时，给 变量赋值 ： 后面的值
 
bool flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> flag <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;I am a boy &quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot; I am a girl&quot;</span></span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>

结果 ： <span class="token class-name">I</span> am a boy

解释：flag 为<span class="token boolean">true</span>，赋值<span class="token class-name">I</span> am a boy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-5-4-运算符" tabindex="-1"><a class="header-anchor" href="#_6-5-4-运算符" aria-hidden="true">#</a> 6.5.4 ??运算符</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>解释：当a为<span class="token keyword">null</span>时，赋值？？符号后的<span class="token number">10</span>给a，然后将a赋值给b<span class="token punctuation">.</span>
      当a不为<span class="token keyword">null</span>时，直接将a赋值给b
 
<span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_6-6类型转换" tabindex="-1"><a class="header-anchor" href="#_6-6类型转换" aria-hidden="true">#</a> <strong>6.6类型转换</strong></h3><h4 id="_6-6-1-number-与string类型之间的转换" tabindex="-1"><a class="header-anchor" href="#_6-6-1-number-与string类型之间的转换" aria-hidden="true">#</a> 6.6.1 Number 与String类型之间的转换</h4><p>Number 转换为 String使用toString();</p><p>String转换为 Number 使用parse();</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//将字符串转换为整型</span>
<span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string-literal"><span class="token string">&#39;111&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myNum<span class="token operator">=</span>int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出 111</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//将整型转换为字符串</span>
<span class="token keyword">var</span> myNum <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> myNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>str <span class="token operator">is</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出 true</span>
\`\`\`dart

\`\`\`dart
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">;</span>   <span class="token comment">//字符串为空，转换为整型会报错</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> myNum <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;myNum&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;转换错误&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="_7-循环语句" tabindex="-1"><a class="header-anchor" href="#_7-循环语句" aria-hidden="true">#</a> <strong>7.循环语句</strong></h2><h3 id="_7-1-for循环" tabindex="-1"><a class="header-anchor" href="#_7-1-for循环" aria-hidden="true">#</a> <strong>7.1 for循环</strong></h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

结果：

<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-while和do-while" tabindex="-1"><a class="header-anchor" href="#_7-2-while和do-while" aria-hidden="true">#</a> <strong>7.2 while和do while</strong></h3><p>while : 先判断条件在进行操作</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>0 1 2 3 4</p></blockquote><blockquote><p>do while: 先进行操作再判断条件</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>0 1 2 3 4</p></blockquote><h3 id="_7-3-break和continue" tabindex="-1"><a class="header-anchor" href="#_7-3-break和continue" aria-hidden="true">#</a> <strong>7.3 break和continue</strong></h3><p>break : 1.在switch语句中跳出switch结构</p><pre><code>2.在循环语句中跳出当前循环语句(注意只能向外跳出一层循环)
</code></pre><p>continue：1.只能在循环语句中使用</p><pre><code>2.跳出当前的此次循环，继续进行下一次循环
</code></pre><h2 id="_8-函数" tabindex="-1"><a class="header-anchor" href="#_8-函数" aria-hidden="true">#</a> <strong>8.函数</strong></h2><h3 id="_8-1-方法的定义" tabindex="-1"><a class="header-anchor" href="#_8-1-方法的定义" aria-hidden="true">#</a> <strong>8.1 方法的定义</strong></h3><p>自定义方法的格式：</p><blockquote><p>返回类型 方法名称（参数1，参数2，......）{</p><p>方法体</p><p>return 返回值；</p><p>}</p></blockquote><p>注：方法中可以定义一个内部方法并调用这个内部方法，该内部方法不能在方法外部调用</p><h3 id="_8-2-方法传参" tabindex="-1"><a class="header-anchor" href="#_8-2-方法传参" aria-hidden="true">#</a> <strong>8.2 方法传参</strong></h3><h4 id="_8-2-1-位置可选参数" tabindex="-1"><a class="header-anchor" href="#_8-2-1-位置可选参数" aria-hidden="true">#</a> 8.2.1 位置可选参数</h4><p>在参数中用中括号[ ] 包含的参数为位置可选参数：（调用的时候可以带上[ ]中的参数，也可不带，也可以带上其中几个）</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> <span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token punctuation">[</span>int age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">   ;    age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">    ;    sex : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">sex</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 输出name : name   ;    age : null    ;    sex : null</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//输出name : name   ;    age : 8    ;    sex : null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h5 id="_8-2-1-1-可选参数可以通过-赋一个默认值" tabindex="-1"><a class="header-anchor" href="#_8-2-1-1-可选参数可以通过-赋一个默认值" aria-hidden="true">#</a> 8.2.1.1 可选参数可以通过&quot;=&quot;赋一个默认值</h5><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> <span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token punctuation">[</span>int age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;man&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">   ;    age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">    ;    sex : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">sex</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用方法时没有传入参数sex，则sex默认被赋值为&quot;man&quot;。</p><h4 id="_8-2-2-名字可选参数" tabindex="-1"><a class="header-anchor" href="#_8-2-2-名字可选参数" aria-hidden="true">#</a> 8.2.2 名字可选参数</h4><p>在参数中用{ }包含的参数为命名可选参数</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">String</span> <span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span>int age<span class="token punctuation">,</span> <span class="token class-name">String</span> sex <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;man&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">  -----  age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">  -----  sex : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">sex</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dart&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//输出  name : Dart  -----  age : 8  -----  sex : man</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dart&quot;</span></span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;girl&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//输出  name : Dart  -----  age : null  -----  sex :girl</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getPersionInfo</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dart&quot;</span></span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;girl&quot;</span></span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出  name : Dart  -----  age : 8  -----  sex : girl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：在{ }外的参数为必传参数，而{ }里的参数为可选参数，即可传可不传，可以不按照{ }里的参数顺序传参，当传{ }中的参数时，应该用：</p><p><strong>参数名：参数值</strong></p><p>的方式传递。</p></blockquote><h4 id="_8-2-3-方法可以作为参数传递" tabindex="-1"><a class="header-anchor" href="#_8-2-3-方法可以作为参数传递" aria-hidden="true">#</a> 8.2.3 方法可以作为参数传递</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//方法，可作为参数</span>
<span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am method one&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">//参数为方法的函数</span>
<span class="token function">method2</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//调用方法method2</span>
<span class="token function">method2</span><span class="token punctuation">(</span>method1<span class="token punctuation">)</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>I am method one</p><p>解释：和匿名方法一样:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> fn<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;一个匿名方法&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fn是一个变量，代表着这个（）{ print(&quot;一个匿名方法&quot;); };方法，可以直接当作参数传递。</p></blockquote><h4 id="_8-2-4-箭头函数" tabindex="-1"><a class="header-anchor" href="#_8-2-4-箭头函数" aria-hidden="true">#</a> 8.2.4 箭头函数</h4><p>当函数体的内容只有一句时，可用箭头指向表示。</p><p>例如以下函数体可以改为用箭头=&gt;指向：</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>使用箭头表示前：

<span class="token comment">// 当数组中的元素大于5，则返回5</span>
<span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>newList<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

结果：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>

使用箭头表示后<span class="token punctuation">:</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">//使用三目运算，将函数体简化成一句话，输出的结果和上面的例子是一样的</span>
 
<span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newList1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> e <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token number">5</span> <span class="token punctuation">:</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>newList1<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//结果：[2, 4, 5, 5, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_8-2-5-匿名方法" tabindex="-1"><a class="header-anchor" href="#_8-2-5-匿名方法" aria-hidden="true">#</a> 8.2.5 匿名方法</h4><p>匿名方法，顾名思义，即是没有名字的方法，匿名方法可以赋值给一个变量，例如：</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">//定义了一个变量fun()，这个变量的值是后面的方法体（匿名方法）</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;我是匿名方法&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//在这里fun()是一个变量,在这里使用了这个变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果： 我是匿名方法</p></blockquote><p>注：这个匿名方法也可以带参数。</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>int i<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">//定义了一个变量fun,使用这个变量的时候需要带上一个参数</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;我是匿名方法 ：</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//这里使用fun(2)这一个变量  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果:</p><p>我是匿名方法 ：2</p></blockquote><p>匿名方法的常用场景：</p><p>1）将一个匿名函数赋值给一个变量；</p><p>2）在传参的时候，把匿名函数作为参数传递</p><h4 id="_8-2-6-自执行方法" tabindex="-1"><a class="header-anchor" href="#_8-2-6-自执行方法" aria-hidden="true">#</a> 8.2.6 自执行方法</h4><p>顾名思义，自执行方法，即指不需要主动的调用该方法，当程序启动的时候会自动执行该段代码；</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token comment">//这里输入代码内容 </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>(() { print(&quot;这是一段自执行代码！&quot;); })();</p><p>结果： 这是一段自执行代码！</p></blockquote><p>在括号里可以定义传入的参数，在第一个括号里定义形参，在最后一个括号里传入实参，如：</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span><span class="token punctuation">(</span>int i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;这是一段自执行代码！&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>50 这是一段自执行代码！</p></blockquote><h2 id="_9-类-对象" tabindex="-1"><a class="header-anchor" href="#_9-类-对象" aria-hidden="true">#</a> <strong>9.类，对象</strong></h2><h4 id="_9-1-1-dart是一门面向对象的编程语言" tabindex="-1"><a class="header-anchor" href="#_9-1-1-dart是一门面向对象的编程语言" aria-hidden="true">#</a> <strong>9.1.1 Dart是一门面向对象的编程语言</strong> ;</h4><p>1）面向对象编程语言的三个基本特征是：封装，继承，多态</p><pre><code>封装：封装是对象和类的主要特征。封装，把客观事物封装成抽象的类，并且把自己的部分属性和方法提供给其他对象使用。
</code></pre><p>继承： 面向对象编程语言的一个主要功能是“继承”。继承是指该实例化的对象能够使用现有类，以及这个类所继承的类的所有的变量和方法。</p><p>多态：多态性是允许你将父对象设置成为一个或更多的他的子对象相等的技术。</p><p>2）Dart所有的东西都是对象，所有的对象都是继承自Object类。Dart是单继承的面向对象语言，所有的对象都是类的实例，并且所有的类都是Object的子类。</p><p>3）一个类通常由属性和方法组成。</p><p>9.1.2 类的构造函数</p><pre><code>构造函数有两种：
</code></pre><p>1）默认构造函数：</p><p>当实例化对象的时候，会自动调用的函数，构造函数的名称和类的名称相同，在一个类中默认构造函数只能由一个。</p><p>2）命名构造函数：</p><p>当通过指定的命名构造函数实例化对象时，会调用改命名构造函数，命名构造函数可以有多个。</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>                                  <span class="token comment">//persion为类名</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>                                   <span class="token comment">//属性</span>
  int age<span class="token punctuation">;</span>
 
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//默认构造函数，当实例化一个对象时，会自动调用到该函数</span>
 
  <span class="token class-name">Persion</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;这是一个命名构造函数&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                   <span class="token comment">//方法</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">  age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Persion</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ShenZhen&quot;</span></span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//实例化对象（调用了默认构造函数）</span>
  man<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token class-name">Persion</span> man2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//实例化对象的时候调用了命名构造函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 ：</p><p>name : ShenZhen age : 40 这是一个命名构造函数</p></blockquote><h4 id="_9-1-3-类的私有方法和属性" tabindex="-1"><a class="header-anchor" href="#_9-1-3-类的私有方法和属性" aria-hidden="true">#</a> 9.1.3 类的私有方法和属性</h4><p>java等语言中有private,public,proteccted关键字表示属性或者方法的私有性，而在Dart语言中使用下划线_表示该方法或属性为私有的。</p><p>注意：只有当类定义在其他独立的文件上时&quot;_&quot;表示私有性才是有效的，若和主入口函数main()在同一个文件下,私有性不会生效。</p><pre><code>如果想要使用类的私有方法或者私有属性，可以通过类中公有方法返回私有属性。
</code></pre><p>如私有属性（私有方法同理）：</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> _name<span class="token punctuation">;</span>                            <span class="token comment">//私有属性</span>
 
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//公有方法，返回私有属性</span>
 
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Persion</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dart&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> myName <span class="token operator">=</span> man<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//Persion类的实例对象通过Persion类的公有方法getName()获取类中的私有属性</span>
  <span class="token function">print</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：Dart</p></blockquote><h4 id="_9-1-4-类中的getter和setter修饰" tabindex="-1"><a class="header-anchor" href="#_9-1-4-类中的getter和setter修饰" aria-hidden="true">#</a> 9.1.4 类中的getter和setter修饰</h4><p>类中用get修饰的方法块，使用的时候通过调用属性的方式使用。</p><p>如：</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> _name<span class="token punctuation">;</span>
 
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">get</span> getName <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token keyword">set</span> <span class="token function">setName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _name <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Persion</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//实例化一个Persion对象</span>
  <span class="token function">print</span><span class="token punctuation">(</span>man<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//和调用类的属性的方式一样。通过“对象.属性”的方式调用get修饰的方法体</span>
 
  man<span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;惠州&quot;</span></span><span class="token punctuation">;</span>                        <span class="token comment">//通过“对象.属性 = 值”的方式调用set修饰的方法体</span>
  <span class="token function">print</span><span class="token punctuation">(</span>man<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>深圳 惠州</p></blockquote><h4 id="_9-1-5-类中的静态方法和静态成员" tabindex="-1"><a class="header-anchor" href="#_9-1-5-类中的静态方法和静态成员" aria-hidden="true">#</a> 9.1.5 类中的静态方法和静态成员</h4><h5 id="_9-1-5-1使用static-关键字来实现类级别的变量和函数" tabindex="-1"><a class="header-anchor" href="#_9-1-5-1使用static-关键字来实现类级别的变量和函数" aria-hidden="true">#</a> 9.1.5.1使用static 关键字来实现类级别的变量和函数</h5><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">;</span>                  <span class="token comment">//name为static修饰的静态变量</span>
 
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Persion</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//使用name这个属性时直接通过“类名.属性”的方式   </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//结果：深圳</p></blockquote><h5 id="_9-1-5-2静态方法不能访问非静态成员-非静态方法可以访问静态成员" tabindex="-1"><a class="header-anchor" href="#_9-1-5-2静态方法不能访问非静态成员-非静态方法可以访问静态成员" aria-hidden="true">#</a> 9.1.5.2静态方法不能访问非静态成员，非静态方法可以访问静态成员</h5><h4 id="_9-1-6-对象操作符" tabindex="-1"><a class="header-anchor" href="#_9-1-6-对象操作符" aria-hidden="true">#</a> 9.1.6 对象操作符</h4><pre><code>？   条件运算符

as   类型转换

is    类型判断

..      级联操作
</code></pre><h5 id="_9-1-6-1-条件运算符" tabindex="-1"><a class="header-anchor" href="#_9-1-6-1-条件运算符" aria-hidden="true">#</a> 9.1.6.1 条件运算符(?)</h5><p>在对象的后面使用？判断该对象是否是null.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">;</span>
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Persion</span> man<span class="token punctuation">;</span>                              <span class="token comment">//这里只是定义了一个Persion的对象man,但是没有给man赋值</span>
  <span class="token function">print</span><span class="token punctuation">(</span>man<span class="token operator">?</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//这里会报错，使用了条件运算符？判断man是一个空值，故不会打印也不会报错</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_9-1-6-2-类型判断-is" tabindex="-1"><a class="header-anchor" href="#_9-1-6-2-类型判断-is" aria-hidden="true">#</a> 9.1.6.2 类型判断(is)</h5><p>使用 is 判断该变量是什么数据类型</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Persion</span> man<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>man <span class="token operator">is</span> <span class="token class-name">Persion</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                          <span class="token comment">//判断man是否是Persion类型</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;true&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>true</p></blockquote><h5 id="_9-1-6-3-类型判断-as" tabindex="-1"><a class="header-anchor" href="#_9-1-6-3-类型判断-as" aria-hidden="true">#</a> 9.1.6.3 类型判断(as)</h5><p>使用as进行类型的转换</p><blockquote><p>man as Persion //将对象man转换为Persion对象</p></blockquote><h5 id="_9-1-6-4-级联操作" tabindex="-1"><a class="header-anchor" href="#_9-1-6-4-级联操作" aria-hidden="true">#</a> 9.1.6.4 级联操作(..)</h5><p>在对象的后面使用级联符号“..”加属性或方法,会返回对象的本身，类似于java中的Builde建造者模式</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name <span class="token punctuation">;</span>
  int age <span class="token punctuation">;</span>
 
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">  and  age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Persion</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  man<span class="token punctuation">.</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;惠州&quot;</span></span>                                   <span class="token comment">//使用..name后返回的还是man对象，可以进行接下来..age的操作</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">50</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>name : 惠州 and age : 50</p></blockquote><h4 id="_9-1-7-继承" tabindex="-1"><a class="header-anchor" href="#_9-1-7-继承" aria-hidden="true">#</a> <strong>9.1.7 继承</strong></h4><p>1）一个子类继承自一个父类，那么这个子类的实例化对象直接可以使用这个父类的属性或方法。继承使用关键字extent 。</p><p>格式：</p><p>子类 extent 父类</p><p>如:</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name <span class="token punctuation">;</span>
  int age <span class="token punctuation">;</span>
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">  and  age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">Superman</span> <span class="token keyword">extends</span> <span class="token class-name">Persion</span><span class="token punctuation">{</span>                         <span class="token comment">//Superman继承Persion</span>
  
  <span class="token class-name">Superman</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//super()里的参数是要传递给父类的参数</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Superman</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Superman</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//Superman实例化对象</span>
  man<span class="token punctuation">.</span><span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment">//Superman实例化的对象可以直接使用父类Persion的方法show();</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>name : 深圳 and age : 40</p></blockquote><p>2）在子类中不仅仅可以扩展父类中的属性或者方法，还能重写父类中的方法</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
 
  int age<span class="token punctuation">;</span>
 
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">  and  age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">Superman</span> <span class="token keyword">extends</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">Superman</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                  <span class="token comment">//在子类中复写了父类中的show方法</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;姓名: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">----年龄：</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Superman</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Superman</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               
  man<span class="token punctuation">.</span><span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                    <span class="token comment">//通过子类的对象调用的是子类中复写的方法</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>姓名: 深圳----年龄：40</p></blockquote><p>3）可以通过super关键字调用父类的方法</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
 
  int age<span class="token punctuation">;</span>
 
  <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">  and  age : </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">age</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">Superman</span> <span class="token keyword">extends</span> <span class="token class-name">Persion</span> <span class="token punctuation">{</span>
  <span class="token class-name">Superman</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> int age<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">void</span> <span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//子类的show()方法通过super.show()的形式调用父类的方法</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Superman</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Superman</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  man<span class="token punctuation">.</span><span class="token keyword">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>name : 深圳 and age : 40</p></blockquote><h4 id="_9-1-8-抽象类" tabindex="-1"><a class="header-anchor" href="#_9-1-8-抽象类" aria-hidden="true">#</a> <strong>9.1.8 抽象类</strong></h4><p>Dart中的抽象类：Dart中的抽象类主要用于定义标准，子类可以继承抽象类，也可以实现抽象类接口。</p><p>1.抽象类通过abstract关键字来定义；</p><p>2.Dart中的抽象类不能通过abstract声明，Dart中没有方法体的方法我们称之为抽象方法；</p><p>3.如果子类继承抽象类必须实现里面的抽象方法；</p><p>4.如果把抽象类当作接口实现的话必须得实现抽象类里面定义的所有属性和方法；</p><p>5.抽象类不能被实例化，只有继承它的子类可以。</p><p>extends抽象类 和 implement 的区别：</p><p>1.如果要复用抽象类里面的方法，并且要用抽象方法约束自类的话我们就用extend继承抽象类</p><p>2.如果只是把抽象类当作标准的话我们就用implement实现抽象类</p><p>如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>                                <span class="token comment">//Animal 为抽象类</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                               <span class="token comment">//没有实现方法体，默认是一个抽象方法</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
  <span class="token metadata function">@override</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                             <span class="token comment">//如果在Dog类中没有定义eat()方法，将会报错</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面直接通过抽象类进行初始化，会报错</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//会报错</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-1-9-多态" tabindex="-1"><a class="header-anchor" href="#_9-1-9-多态" aria-hidden="true">#</a> <strong>9.1.9 多态</strong></h4><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Animal</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//使用d.eat()的时候会调用Dog类中复写的eat()方法</span>
<span class="token class-name">Animal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//使用c.eat()的时候会调用Cat类中复写的eat()方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-1-10-接口" tabindex="-1"><a class="header-anchor" href="#_9-1-10-接口" aria-hidden="true">#</a> <strong>9.1.10 接口</strong></h4><p>和java一样，Dart中也有接口，但是和java有区别。</p><pre><code>在Java 中用interface关键字定义接口，而在Dart语言中普通的类或者抽象类都可以作为接口被实现。同样是通过使用implement关键字实现。
</code></pre><p>注意： Dart中如果使用普通类或者抽象类做接口类，实现这个接口类的时候要覆写这个接口类所有属性和方法。抽象类中可以定义抽象方法，故建议使用抽象类定义接口。（接口通常是定义规范）</p><p>如：</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>                           <span class="token comment">//抽象类，用作接口</span>
  <span class="token class-name">String</span> size<span class="token punctuation">;</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//do something</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>                      <span class="token comment">//implements 用于实现接口</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">String</span> size<span class="token punctuation">;</span>                                     <span class="token comment">//需要重新定义属性size</span>
  
  <span class="token metadata function">@override</span>
  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                         <span class="token comment">//需要重新定义方法eat()</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>实现多个接口，通过逗号“，”分隔</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span> <span class="token punctuation">{</span>                          <span class="token comment">//要实现两个类，通过“，”分隔</span>
  <span class="token metadata function">@override</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token metadata function">@override</span>
  <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                                        <span class="token comment">//不覆写doA()会报错</span>
  <span class="token metadata function">@override</span>
  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                                        <span class="token comment">//不覆写doB()会报错</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="_9-1-11-mixins-为了实现类似多继承" tabindex="-1"><a class="header-anchor" href="#_9-1-11-mixins-为了实现类似多继承" aria-hidden="true">#</a> <strong>9.1.11 mixins（为了实现类似多继承）</strong></h4><p>mixins的中文意思是混入，就是在类中混入其他功能。</p><pre><code>在Dart中可以使用minxins实现类似多继承的功能。
</code></pre><p>mixins的使用条件随着Dart的版本不断更新而有所改变，此处讲的是Dart2.x中使用minxins的条件：</p><pre><code>1.作为minxins的类只能继承自Object,不能继承其他类

2.作为minxins的类不能有构造函数

3.一个类可以minxins多个minxins类

4.minxins绝不是继承，也不是接口，而是一种全新的特性
</code></pre><blockquote><p>如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>                                           <span class="token comment">//A作为minxins类，只能继承自Object</span>
  <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>                                         <span class="token comment">//B作为minxins类，只能继承自Object</span>
  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am B&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">with</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                             <span class="token comment">//C混合了A类和B类，类似继承，C的实例化类可以使用A类以及B类中的方法         </span>
 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>I am A I am B</p></blockquote><p><strong>疑问：当两个混合类A和B中有相同的方法，那么C类中调用这个方法会产生什么样的结果呢？</strong></p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                         <span class="token comment">//A类中run()方法</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;run A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        
  <span class="token punctuation">}</span>
 
  <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                          <span class="token comment">//B类中run()方法</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;run B&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am B&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">with</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>I am A I am B run B</p><p>解释：<strong>当两个混合类A和B中有相同的方法，那么C类调用该方法的时候会调用with关键字上最靠后的混合类的方法</strong></p></blockquote><h2 id="_10-泛型" tabindex="-1"><a class="header-anchor" href="#_10-泛型" aria-hidden="true">#</a> <strong>10.泛型</strong></h2><h3 id="_10-1-泛型方法" tabindex="-1"><a class="header-anchor" href="#_10-1-泛型方法" aria-hidden="true">#</a> 10.1 泛型方法</h3><p>先看一个例子:</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">getData</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：6</p></blockquote><p>当我们想要返回一个数字类型的数据，可以调用getDate()方法，传入数字类型，返回数字类型</p><pre><code>但是当我们想要返回一个String类型的数据的时候，此时是需要定义一个返回String类型的方法的。
</code></pre><p>如：</p><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;惠州&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：惠州</p></blockquote><p>但是这样又会出现另外一个问题，就是代码冗余问题，这两个方法大部分内容是相同的，只是我们传入和返回的数据类型不同。</p><pre><code>此时我们可以使用泛型的方式，可实现传什么类型就返回什么类型的功能，还支持类型校验。

以下“T”为不固定的传入类型：
</code></pre><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">T</span> getData<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment">//传入的实参是什么类型，则“T”就代表该类型</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">print</span><span class="token punctuation">(</span>getData<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//&lt;String&gt;中的String为检验传的参数是否是String类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：深圳</p></blockquote><h3 id="_10-2-泛型类" tabindex="-1"><a class="header-anchor" href="#_10-2-泛型类" aria-hidden="true">#</a> 10.2 泛型类</h3><h4 id="_10-2-1-实例化类的时候没有指定类型" tabindex="-1"><a class="header-anchor" href="#_10-2-1-实例化类的时候没有指定类型" aria-hidden="true">#</a> 10.2.1 实例化类的时候没有指定类型</h4><blockquote><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ListClass</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>                                              <span class="token comment">//定义泛型类</span>
  <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token keyword">void</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 
  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ListClass</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//实例化一个泛型类（这里没有指定类型T的实际类型，因此没有类型校验，传各种类型）</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//添加int类型数据</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//添加String类型数据，不会报错</span>
  list<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><p>1 2 3 深圳</p></blockquote><h4 id="_10-2-2-实例化类的时候指定了类型" tabindex="-1"><a class="header-anchor" href="#_10-2-2-实例化类的时候指定了类型" aria-hidden="true">#</a> 10.2. 2 实例化类的时候指定了类型</h4><p>当实例化泛型类的时候传入了指定的类型，那么在调用其中该泛型类中的方法时会进行类型校验，只能使用指定的类型。否则将将会报错。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ListClass</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListClass</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//指定了实例化ListClass 类时传入的类型为int类型</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//报错</span>
  list<span class="token punctuation">.</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-3-泛型接口" tabindex="-1"><a class="header-anchor" href="#_10-3-泛型接口" aria-hidden="true">#</a> 10. 3 泛型接口</h4><p>在具体的类实现了泛型接口后，实例化该类需指定传入的类型：</p><p>如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>                                     <span class="token comment">//抽象类Cache，此处做接口使用</span>
  <span class="token function">getByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token function">setByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">class</span> <span class="token class-name">FileCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>                       <span class="token comment">//Cache类的实现类</span>
  <span class="token metadata function">@override</span>
  <span class="token function">getByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
 
  <span class="token metadata function">@override</span>
  <span class="token function">setByKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">FileCache</span> fileCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//实例化FileCache对象的时候，指定&quot;T&quot;的类型</span>
  fileCache<span class="token punctuation">.</span><span class="token function">setByKey</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;深圳&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fileCache<span class="token punctuation">.</span><span class="token function">setByKey</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//报错，指定setByKey()的第二个参数为String类型，但是这里传入了int类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-dart库" tabindex="-1"><a class="header-anchor" href="#_11-dart库" aria-hidden="true">#</a> 11.Dart库</h3><p>在Dart中，库的使用通过import关键字引入。</p><p>library指令可以创建一个库，每个Dart文件都是一个库，即使没有使用library指令来指定。</p><p>Dart中的库有三种：</p><p>1）自定义的库</p><p>2）系统内置库</p><p>3）Pub包管理系统中的库(第三方库)</p><h4 id="_11-1-自定义库" tabindex="-1"><a class="header-anchor" href="#_11-1-自定义库" aria-hidden="true">#</a> 11.1 自定义库</h4><p>格式：</p><blockquote><p>import &#39;lib/xxx.dart&#39;;</p></blockquote><p>当一个类的内容过多时，若把这个类与main()主方法或与其他类写在同一个文件中，将会导致这个文件过大而不便于管理，此时我们可以把这个类独立成一个文件,当另一个类需要使用这个独立成文件的类，通过以上的引用格式，就可以使用这个独立类里的方法了。</p><h4 id="_11-2-系统内置库" tabindex="-1"><a class="header-anchor" href="#_11-2-系统内置库" aria-hidden="true">#</a> 11.2 系统内置库</h4><h5 id="_11-2-1-dart-math" tabindex="-1"><a class="header-anchor" href="#_11-2-1-dart-math" aria-hidden="true">#</a> 11.2.1 dart:math&#39;;</h5><p>格式：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在math库中有许多数学操作方法</p><p>例如以下截图中的求最大值和最小值： ![] (https://img-blog.csdnimg.cn/20201028113911392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQzMzA5NA==,size_16,color_FFFFFF,t_70)</p><p>使用：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//返回10</span>
<span class="token function">max</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//返回20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_11-2-2-dart-io" tabindex="-1"><a class="header-anchor" href="#_11-2-2-dart-io" aria-hidden="true">#</a> 11.2.2 dart:io&#39;;</h5><p>格式：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="async-和-await" tabindex="-1"><a class="header-anchor" href="#async-和-await" aria-hidden="true">#</a> async 和 await</h6><p>在Dart中async 和 await关键字</p><h6 id="async-是让方法变成异步方法。" tabindex="-1"><a class="header-anchor" href="#async-是让方法变成异步方法。" aria-hidden="true">#</a> async 是让方法变成异步方法。</h6><h6 id="await是等待异步方法执行完毕。" tabindex="-1"><a class="header-anchor" href="#await是等待异步方法执行完毕。" aria-hidden="true">#</a> await是等待异步方法执行完毕。</h6><p>1）只有async 方法才能使用await关键字去调用方法</p><p>2）如果调用别的async方法必须使用 await关键字</p><p>如：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                       
  <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//调用test1()方法,要使用await关键字，否则若有返回值会报错</span>
  <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//调用test2()方法</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;----over-----&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>                     <span class="token comment">//此方法为async异步方法</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;test---1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//调用了异步方法test3()，(注意如果test3()有返回值，这里必须用await关键字调用)</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;test---1.1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;test---2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>                     <span class="token comment">//声明test3()方法为异步方法</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;test---3&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
结果：

test<span class="token operator">--</span><span class="token operator">-</span><span class="token number">1</span>
test<span class="token operator">--</span><span class="token operator">-</span><span class="token number">3</span>
test<span class="token operator">--</span><span class="token operator">-</span><span class="token number">2</span>
<span class="token operator">--</span><span class="token operator">--</span>over<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
test<span class="token operator">--</span><span class="token operator">-</span><span class="token number">1.1</span>

解释：在<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法中依次调用了test1 <span class="token punctuation">(</span> <span class="token punctuation">)</span>方法和test2（ ）方法，test1（）方法为异步方法，故不需要test1（）方法执行完才开始执行test2（）方法，在test1（）方法中调用了异步方法<span class="token function">test3</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>这里使用了<span class="token keyword">await</span>关键字来调用<span class="token function">test3</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>方法，此时<span class="token function">test2</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>方法同时在执行。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_11-3-pub包管理系统中的库-第三方库" tabindex="-1"><a class="header-anchor" href="#_11-3-pub包管理系统中的库-第三方库" aria-hidden="true">#</a> 11.3 Pub包管理系统中的库(第三方库)</h5><p>例如从 <a href="">https://pub.dev/packages</a> 获取http第三方库</p><ul><li>从下面网址中找到要用的库（以http库为例）：</li></ul><p><a href="">https://pub.dev/packages</a></p><ul><li>打开项目中的pubspec.yaml文件，找到 dependencies：，在dependencies下面添加内容：</li></ul><blockquote><p>http: ^0.12.2</p></blockquote><ul><li><p>打开AndroidStudio的命令工作台：运行pub get 命令 ，获取远程库</p></li><li><p>引用库</p></li></ul><h4 id="_11-4-dart库冲突的解决办法" tabindex="-1"><a class="header-anchor" href="#_11-4-dart库冲突的解决办法" aria-hidden="true">#</a> 11.4 Dart库冲突的解决办法</h4><p>当两个库中有相同名称的标识符时，我们不能辨别我们要使用到的标识符是属于哪一个库里面的，在java中通常是通过导入完整的包名路径来指定使用哪一个库里的标识符，在Dart语言中我们要使用到库的重命名的方法。</p><p>如下：</p><p>在当前类中引用了两个库文件，Persion1.dart和Persion2.dart,这两个库文件中都有对Perdsion类的定义，当前类中有一个main（）方法，这个方法实例化了一个Persion类，但是这个时候回报错，因为IDE不清楚调用的是哪一个库文件里定义的Persion类。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter_app_demo14/Persion1.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter_app_demo14/Persion2.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Persion</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//报错，IDE不清楚调用的是哪一个库文件里定义的Persion类</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决办法：</p><p>使用 as 关键字给引用到的库重命名：</p><p>格式：</p><p>库名 as XXX</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter_app_demo14/Persion1.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter_app_demo14/Persion2.dart&#39;</span></span> <span class="token operator">as</span> lib<span class="token punctuation">;</span>            <span class="token comment">// as关键字给库重命名为lib</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Persion</span> p <span class="token operator">=</span> <span class="token class-name">Persion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//这里Persion使用的是Persion1.dart里的</span>
  <span class="token class-name"><span class="token namespace">lib<span class="token punctuation">.</span></span>Persion</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">lib<span class="token punctuation">.</span></span>Persion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//这里Persion使用的是Persion2.dart里的</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_11-5-库的部分导入" tabindex="-1"><a class="header-anchor" href="#_11-5-库的部分导入" aria-hidden="true">#</a> 11.5 库的部分导入</h5><p>部分导入的的两种模式：</p><p>模式一：只导入需要的部分，使用show关键字，如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;Persion1.dart&#39;</span></span>  <span class="token keyword">show</span> getName<span class="token punctuation">;</span>          <span class="token comment">//此时可以使用Persion1.dart库文件中的getName()方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>模式二：隐藏不需要的部分，使用hide关键字，如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;Persion1.dart&#39;</span></span>  <span class="token keyword">hide</span> getName<span class="token punctuation">;</span>           <span class="token comment">//此时不可以使用Persion1.dart库文件中的getName()方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,306),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","dartrumenjichuzhishi.html.vue"]]);export{r as default};
