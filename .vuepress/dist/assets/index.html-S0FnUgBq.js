import{_ as n,o as l,c as a,b as e,d as i}from"./app-bTNKyK6n.js";const s={},t=e('<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> git</h1><ol><li><p>git Git 是目前世界上最先进的分布式版本控制系统 特点：</p><ol><li>分布式版本控制</li><li>非常方便的可以对比不同版本的区别</li><li>多人协作时，可以快速检测是否有代码冲突</li><li>和集中式版本控制 svn 对比，更稳定，更安全</li></ol></li><li><p>安装</p><ol><li>windows 下载安装包,安装(全部下一步)</li><li>因为 Git 是分布式版本控制系统，所以，每个机器都必须自报家门 <ul><li><code>git config --global user.name &quot;Your Name&quot;</code></li><li><code>git config --global user.email &quot;email@example.com&quot;</code></li></ul></li><li>查看 git 配置信息 <ul><li><code>git config --list</code>(想修改执行上面操作)</li></ul></li></ol></li></ol>',2),o=i("div",{class:"custom-container warning"},[i("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[i("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[i("circle",{cx:"12",cy:"12",r:"9"}),i("path",{d:"M12 8v4"}),i("path",{d:"M12 16h.01"})])]),i("p",{class:"custom-container-title"},"注意："),i("ol",null,[i("li",null,"如果对配置进行修改，重复上面命令"),i("li",null,"配置只需要执行一次")])],-1),d=e(`<h2 id="git-命令" tabindex="-1"><a class="header-anchor" href="#git-命令" aria-hidden="true">#</a> git 命令</h2><ol><li><code>git init</code> : 初始化 , 生成 git 仓库</li><li><code>git add</code> : 把文件添加到仓库(在暂存区) <ul><li>可以跟的值：file.xx 某一个文件</li><li>. / -A 代表所有文件</li></ul></li><li><code>git commit -m &#39;提示提交的说明&#39;</code> : 把文件提交到仓库(提交到版本库)</li><li><code>git status</code> : 查看暂存区的工作状态</li><li><code>git reset HEAD &lt;file&gt;</code> : 可以把暂存区的修改撤销掉（unstage），重新放回工作区</li><li><code>git checkout -- file</code> : 可以丢弃工作区的修改,(可以把仓库中的文件下载到本地)</li><li><code>git reset --hard HEAD^</code> : 版本回退 <ul><li>一个&quot;^&quot;代表一层版本</li></ul></li><li><code>git log </code>: 查看提交记录 <ul><li>运行后鼠标会悬挂，输入字母&#39;q&#39;退出</li></ul></li><li><code>git reflog</code> : 查看所有历史记录</li><li><code>git rm</code> : 删除命令</li></ol><h2 id="git分支" tabindex="-1"><a class="header-anchor" href="#git分支" aria-hidden="true">#</a> git分支</h2><ol><li>不在源代码上直接修改，可以开启具体相同代码的分支，在分支上进行开发，开发完成后再合并到主分支即可</li><li><code> git checkout -b name</code> : 开启一个分支，并切换到这个分支下 <code>git branch name </code>: 开启一个分支 <code>git checkout name</code> : 切换分支</li><li><code>git branch</code> : 查看分支 (分支前有*符号就是当前所在分支)</li><li><code>git branch -a</code> : 查看所有分支，包括远程</li><li><code>git merge</code> : 分支合并,合并指定分支到当前分支</li><li>分支合并时的冲突 解决方案：1. 保存其中某一份 1. 全保存 <code>git log --graph</code> 可以看到分支合并图</li><li><code>git branch -d name</code> 删除分支（记得不要在当前分支下删，会删除失败）</li><li><code>git checkout -b [本地分支名] [origin/远程分支名]</code> 从远程仓库拉本地不存在的分支</li></ol><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h2><ol><li><code>git tag vx.x.x</code> : 创建</li><li><code>git tag</code> : 查看标签</li><li><code>git show &lt;tagname&gt;</code> : 查看标签详情</li></ol><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><ol><li>克隆功能 <code>git clone git@gitee.com:gavinzhulei/vue-form-making.git</code></li><li>本地已经有clone下来的仓库了，需要关联远程仓库（比如公司的仓库） <code>git remote add origin https://gitee.com/numbrun/vuepress-blog.git</code><ul><li>origin 是默认，关联多个仓库的时候可以替换别的名字，比如 company</li></ul></li><li><code>git remote -v</code> 查看远程仓库地址</li><li>推送功能 本地向远程仓库推送代码： <code>git push oigin develop</code></li><li>拉取功能 从远程仓库把代码下载到本地 : <code>git pull company develop</code></li><li>标签 <ol><li><code>git push origin &lt;tagname&gt;</code> : 向远程仓库推送 tag</li><li><code>git push origin --tags</code> : 一次性推送全部尚未推送到远程的本地标签</li><li><code>git tag -d name</code> : 删除本地 tag</li><li><code>git push origin :refs/tags/name To github.com:michaelliao/learngit.git</code> :删除远程仓库中的 tag</li></ol></li></ol><h2 id="git-stash" tabindex="-1"><a class="header-anchor" href="#git-stash" aria-hidden="true">#</a> git stash</h2><ol><li><code>git stash save</code> 能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。</li><li><code>git stash pop</code> 将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。</li><li><code>git stash list</code> 所有保存的记录列表</li><li><code>git stash clear</code> 删除所有保存</li></ol><h2 id="我的git提交名模式" tabindex="-1"><a class="header-anchor" href="#我的git提交名模式" aria-hidden="true">#</a> 我的git提交名模式</h2><h4 id="第一种" tabindex="-1"><a class="header-anchor" href="#第一种" aria-hidden="true">#</a> 第一种</h4><blockquote><p>远程仓库有两个，一个是自己的，一个是公司的,公司的仓库是fork来的，所以你的远程仓库其实有两个 注：可通过 <code>git remote -v </code>查看</p></blockquote><p>步骤如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone 自己的仓库地址.git
<span class="token function">git</span> remote <span class="token function">add</span> company 公司的仓库地址.git

//写完代码
<span class="token function">git</span> stash save
<span class="token function">git</span> pull company develop //先拉取公司仓库的dev分支
<span class="token function">git</span> stash pop

// 有冲突解决冲突，解决完成后
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> 
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;提交的信息&#39;</span>
<span class="token function">git</span> push origin develop //提到自己远程的仓库的分支  

//提交到自己的仓库后，在gitlab上操作-<span class="token operator">&gt;</span>与公司仓库进行合并
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种的相对比较规范性，因为主仓库的commit会更精华简介性，因为你在本地可能有无数次的commit，会导致仓库臃肿</p><h4 id="第二种" tabindex="-1"><a class="header-anchor" href="#第二种" aria-hidden="true">#</a> 第二种</h4><blockquote><p>远程仓库只有一个，主要通过分支管理，有一个主分支，如dev，还有其他的分支，包括属于自己的分支名，或以某个功能开发模块命名的分支等等 步骤如下</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone 自己的仓库地址.git

//创建分支
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> 分支名
//在编译器上发布分支

//然后在自己的分支下开发，开发完成后需要合并到dev分支上

//拉取远程最新的分支
<span class="token function">git</span> pull origin dev
//解决冲突（此时在自己的分支名下）
//解决好后，提到自己的远程分支
<span class="token function">git</span> push origin 分支名

//最后做合并操作，这里的合并可有至少多种方法

<span class="token comment"># 1. 命令行合并</span>
<span class="token comment"># 来到自己的dev分支下，合并你开发的分支名 </span>
<span class="token function">git</span> merge 分支名 
<span class="token comment"># 提交到远程仓库主分支dev</span>
<span class="token function">git</span> push origin dev

<span class="token comment"># 1. 去gitlab做合并请求操作</span>
通过网页端 做合并请求，可能会有审核人审核，包括权限等等问题
通过后你的代码就合并到主分支上了

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h3><ol><li>远程新建一个分支 production-type-set ，本地没有 需要切到production-type-set 这时候直接切<code>git checkout production-type-set</code>是会报错的</li></ol><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>runnumb@h 标准版 % git checkout production-type-set
error: pathspec <span class="token string">&#39;production-type-set&#39;</span> did not match any file(s) known to git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法" aria-hidden="true">#</a> 解决方法</h4><ol><li>首先我们看一下远程分支情况：<code>git branch -a</code></li><li>在这里没有看到我们想要的分支,先获取所有分支 <code>git fetch</code></li><li>这时在切到<code>git checkout production-type-set</code>即可</li></ol>`,24),c=[t,o,d];function r(u,g){return l(),a("div",null,c)}const v=n(s,[["render",r],["__file","index.html.vue"]]);export{v as default};
