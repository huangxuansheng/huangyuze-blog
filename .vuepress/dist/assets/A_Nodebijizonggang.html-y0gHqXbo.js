import{_ as p,r as o,o as i,c,d as s,e as n,f as e,b as t}from"./app-VnZbzlub.js";const l={},u=t(`<h1 id="node基本语法1" tabindex="-1"><a class="header-anchor" href="#node基本语法1" aria-hidden="true">#</a> NODE基本语法1</h1><h2 id="一-node入门基础知识与语法" tabindex="-1"><a class="header-anchor" href="#一-node入门基础知识与语法" aria-hidden="true">#</a> 一.node入门基础知识与语法</h2><h5 id="_1-node官网api文档" tabindex="-1"><a class="header-anchor" href="#_1-node官网api文档" aria-hidden="true">#</a> 1.node官网API文档</h5><p>​ http://nodejs.cn/api/</p><h5 id="_2-控制台-启动node项目代码" tabindex="-1"><a class="header-anchor" href="#_2-控制台-启动node项目代码" aria-hidden="true">#</a> 2.控制台 启动node项目代码</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  npm run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3-js能做与不能做的事情" tabindex="-1"><a class="header-anchor" href="#_3-js能做与不能做的事情" aria-hidden="true">#</a> 3.JS能做与不能做的事情:</h5><pre><code>	①js能做:操作css  操作dom 执行常规函数方法 前后端通信
</code></pre><p>​ ②js不能做:不能链接数据库操作文件系统</p><h5 id="_4-node-async-异步-api基础知识点" tabindex="-1"><a class="header-anchor" href="#_4-node-async-异步-api基础知识点" aria-hidden="true">#</a> 4.node async(异步) api基础知识点:</h5><p>​ ① 同步是请求与响应同步在一起,异步是不在一起</p><p>​ ② 回调函数的至少有一个形参,而且在第一个位置,而且是error</p><h5 id="_5-阻塞非阻塞区别" tabindex="-1"><a class="header-anchor" href="#_5-阻塞非阻塞区别" aria-hidden="true">#</a> 5.阻塞非阻塞区别 :</h5><p>​ ①单线程阻塞,多线程非阻塞</p><h2 id="二-基于命令行的实行生成express" tabindex="-1"><a class="header-anchor" href="#二-基于命令行的实行生成express" aria-hidden="true">#</a> 二.基于命令行的实行生成express</h2><p><code> 1、npm install express-generator -g</code><code> 2、express 项目名称 // 表示在当前目录下生成一个项目</code></p><h2 id="三-常用基础代码操作" tabindex="-1"><a class="header-anchor" href="#三-常用基础代码操作" aria-hidden="true">#</a> 三.常用基础代码操作</h2><h5 id="_1-引用包" tabindex="-1"><a class="header-anchor" href="#_1-引用包" aria-hidden="true">#</a> 1. 引用包</h5><p><code>const mypackage= require(&#39;./mypachage&#39;);</code></p><h5 id="_2-文件操作" tabindex="-1"><a class="header-anchor" href="#_2-文件操作" aria-hidden="true">#</a> 2.文件操作</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//①写入</span>
fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./fs.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Hong&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//错误优先原则</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//同步fs.writeFileSync(&#39;./fs.txt&#39;,new Date())</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//②读取</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./fs.txt&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-同步异常捕获" tabindex="-1"><a class="header-anchor" href="#_3-同步异常捕获" aria-hidden="true">#</a> 3.同步异常捕获</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>try {
    let data=fs.readFileSync(&#39;./fs.txt&#39;)
    console.log(&quot;成功&quot;);
    console.log(data.toString());
}catch (e) {
    console.error(&#39;出错&#39;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-路径函数" tabindex="-1"><a class="header-anchor" href="#_4-路径函数" aria-hidden="true">#</a> 4.路径函数</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const  path=require(&#39;path&#39;);
//参数中...是可选参数(任意)
console.log(path.join(&#39;a&#39;,&#39;../b&#39;,&#39;c&#39;))
console.log(path.basename(&#39;./fs.txt&#39;));
console.log(path.dirname(&#39;f./fs.txt&#39;));
console.log(path.extname(&#39;./fs.txt&#39;));*/
//获取当前目录路径
console.log(__dirname);
//获取当前目录文件路径,包括当前路径
console.log(__filename);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-美化日志-在bin包中的www替换onlistening" tabindex="-1"><a class="header-anchor" href="#_5-美化日志-在bin包中的www替换onlistening" aria-hidden="true">#</a> 5.美化日志=&gt;(在bin包中的www替换onListening)</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getPackageJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(&#39;----------------------1.开始读取package.json&#39;)</span>
    <span class="token keyword">var</span> _packageJson <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./package.json&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// console.log(&#39;----------------------读取package.json文件完毕&#39;)</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>_packageJson<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">onListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> bind <span class="token operator">=</span> <span class="token keyword">typeof</span> addr <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>
        <span class="token operator">?</span> <span class="token string">&#39;pipe &#39;</span> <span class="token operator">+</span> addr
        <span class="token operator">:</span> <span class="token string">&#39;port &#39;</span> <span class="token operator">+</span> addr<span class="token punctuation">.</span>port<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
#    _____                     .___
#  _/ ____\\\\  ____    ____    __| _/  ____
#  \\\\   __\\\\  /    \\\\  /  _ \\\\  / __ | _/ __ \\\\
#   |  |   |   |  \\\\(  &lt;_&gt; )/ /_/ | \\\\  ___/
#   |__|   |___|  / \\\\____/ \\\\____ |  \\\\___  &gt;
#               \\\\/              \\\\/      \\\\/
=============================================
fnode :: (v0.0.1RELEASE)
        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[SYSTERM]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getPackageJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">应用启动中...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[SYSTERM]应用部署在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>bind<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-node热更新-package-json中修改" tabindex="-1"><a class="header-anchor" href="#_6-node热更新-package-json中修改" aria-hidden="true">#</a> 6.node热更新=&gt;(package.json中修改)</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;scripts&quot;: {
  &quot;start&quot;: &quot;nodemon ./bin/www&quot;
},
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-app-js可改部分" tabindex="-1"><a class="header-anchor" href="#_7-app-js可改部分" aria-hidden="true">#</a> 7.app.js可改部分</h5><p>1.引用路由 可改</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>*var usersRouter = require(&#39;./routes/users&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.路由注册</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app.use(&#39;/users&#39;, usersRouter);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h6><h2 id="四-补充注意点" tabindex="-1"><a class="header-anchor" href="#四-补充注意点" aria-hidden="true">#</a> 四.补充注意点</h2><h5 id="_1-为什么要把所有静态资源-html文件-或者css之类-指定放置到与入口文件index-js同级的public文件夹下" tabindex="-1"><a class="header-anchor" href="#_1-为什么要把所有静态资源-html文件-或者css之类-指定放置到与入口文件index-js同级的public文件夹下" aria-hidden="true">#</a> 1.为什么要把所有静态资源（html文件，或者css之类）指定放置到与入口文件index.js同级的public文件夹下?</h5><ul><li><p>要把所有静态资源（html文件，或者css之类）指定放置到与入口文件index.js同级的public文件夹下</p><ul><li><pre><code>index.js的app.use()函数也指定了public文件夹作为存放静态资源的路径。故sendFile()函数自动从public文件夹里寻找html
</code></pre></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var express = require(&#39;express&#39;);
var app = express();
var path = require(&#39;path&#39;);
//加载静态资源
app.use(express.static(path.join(__dirname, &#39;public&#39;)));

app.get(&#39;/&#39;, function(req, res) {
    res.sendFile(&#39;/index.html&#39;);
});
app.listen(8080);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>index.js在package.json中被指定为入口文件（相当于C语言的 main.cpp）=&gt;不放在一个包实现方法</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var express = require(&#39;express&#39;);
var app = express();
var path = require(&#39;path&#39;);

//app.use(express.static(path.join(__dirname, &#39;public&#39;)));

app.get(&#39;/&#39;, function(req, res) {
    //res.send(&#39;hello!&#39;);
    res.sendFile(__dirname + &#39;/index.html&#39;);
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>​</p><h6 id="_2-新项目常用修改" tabindex="-1"><a class="header-anchor" href="#_2-新项目常用修改" aria-hidden="true">#</a> 2.新项目常用修改</h6><p>​ 二=&gt;5,6,7</p><hr><h1 id="node贰" tabindex="-1"><a class="header-anchor" href="#node贰" aria-hidden="true">#</a> -----------------------==(NODE贰)==-------------------------</h1><h1 id="请求req和响应原理resp-前后端传输简单示例-day7-17" tabindex="-1"><a class="header-anchor" href="#请求req和响应原理resp-前后端传输简单示例-day7-17" aria-hidden="true">#</a> <strong>请求req和响应原理resp（前后端传输简单示例）=&gt;Day7_17</strong></h1><h2 id="一-箭头函数和匿名函数区别-作用时间区别" tabindex="-1"><a class="header-anchor" href="#一-箭头函数和匿名函数区别-作用时间区别" aria-hidden="true">#</a> 一.箭头函数和匿名函数区别(作用时间区别)</h2><h5 id="_1-正常情况下this指向window" tabindex="-1"><a class="header-anchor" href="#_1-正常情况下this指向window" aria-hidden="true">#</a> 1.正常情况下this指向window</h5><h5 id="_2-箭头函数是编译-解析-时" tabindex="-1"><a class="header-anchor" href="#_2-箭头函数是编译-解析-时" aria-hidden="true">#</a> 2.箭头函数是编译(解析)时=&gt;</h5><ul><li><pre><code>编译时指向当前this指向
</code></pre></li></ul><h5 id="_3-匿名函数是进行-运行-时" tabindex="-1"><a class="header-anchor" href="#_3-匿名函数是进行-运行-时" aria-hidden="true">#</a> 3.匿名函数是进行(运行)时=&gt;</h5><ul><li>全局环境指向window function</li></ul><h2 id="二-数据传输简单基础原理-服务端-浏览器-post-get" tabindex="-1"><a class="header-anchor" href="#二-数据传输简单基础原理-服务端-浏览器-post-get" aria-hidden="true">#</a> 二.数据传输简单基础原理=&gt;(服务端,浏览器,POST,GET)</h2><h5 id="_1-浏览器访问原理" tabindex="-1"><a class="header-anchor" href="#_1-浏览器访问原理" aria-hidden="true">#</a> 1. 浏览器访问原理=&gt;</h5><ul><li>协议=&gt;ip=&gt;端口=&gt;uri</li></ul><h5 id="_2-服务端-前端-数据传输过程" tabindex="-1"><a class="header-anchor" href="#_2-服务端-前端-数据传输过程" aria-hidden="true">#</a> 2. 服务端(前端)数据传输过程=&gt;</h5><ul><li>控制层=&gt;逻辑层=&gt;数据层=&gt;后端(数据持久层)</li></ul><h5 id="_3-get与post区别" tabindex="-1"><a class="header-anchor" href="#_3-get与post区别" aria-hidden="true">#</a> 3. GET与POST区别:=&gt;</h5><ul><li>GET是进行明文传递,POST非明文请求数据放在请求体中</li></ul><h2 id="三-状态码大致意义" tabindex="-1"><a class="header-anchor" href="#三-状态码大致意义" aria-hidden="true">#</a> 三.状态码大致意义</h2><ul><li>4xx开头是客户端,</li><li>5xx开头服务端问题,</li><li>200 ok,</li><li>3开头 nginx请求转发</li></ul><h2 id="四-请求响应与跨域" tabindex="-1"><a class="header-anchor" href="#四-请求响应与跨域" aria-hidden="true">#</a> 四.请求响应与跨域</h2><h5 id="_1-req-request-请求对象" tabindex="-1"><a class="header-anchor" href="#_1-req-request-请求对象" aria-hidden="true">#</a> 1.req:request（请求对象）=&gt;</h5><ul><li><pre><code>代表,所有跟请求有关的东西都在req对象里头,包括请求参数 请求头 请求头 cookie
</code></pre></li></ul><h5 id="_2-res-response-响应对象" tabindex="-1"><a class="header-anchor" href="#_2-res-response-响应对象" aria-hidden="true">#</a> 2.res:response（响应对象）=&gt;</h5><ul><li>所有响应客户端的东西都在res里头,包括相应参数,响应头(跨域处理就是在这)</li></ul><h5 id="_3-跨域请求的本质与原理" tabindex="-1"><a class="header-anchor" href="#_3-跨域请求的本质与原理" aria-hidden="true">#</a> 3.跨域请求的本质与原理=&gt;</h5><ul><li><p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</p></li><li><p>请求本质是成功的,但是浏览器判断本次请求不安全</p></li></ul><h2 id="五-resp-send注意事项" tabindex="-1"><a class="header-anchor" href="#五-resp-send注意事项" aria-hidden="true">#</a> 五.resp.send注意事项</h2><ol><li><h5 id="每个完整的请求-一定要以resp-send来结束请求-强调结束请求-而不是以resp-send结束代码" tabindex="-1"><a class="header-anchor" href="#每个完整的请求-一定要以resp-send来结束请求-强调结束请求-而不是以resp-send结束代码" aria-hidden="true">#</a> 每个完整的请求,一定要以resp.send来结束请求,强调结束请求,而不是以resp.send结束代码</h5></li><li><h5 id="如果请求结束了-也想让逻辑代码结束-那么一定要以return结束" tabindex="-1"><a class="header-anchor" href="#如果请求结束了-也想让逻辑代码结束-那么一定要以return结束" aria-hidden="true">#</a> 如果请求结束了,也想让逻辑代码结束,那么一定要以return结束</h5></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>let start=(req,resp)=&gt;{
    resp.send(req.query)
    return;
    console.log(111);}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-补充注意点" tabindex="-1"><a class="header-anchor" href="#六-补充注意点" aria-hidden="true">#</a> 六.补充注意点</h2><h5 id="_1-jq入口函数意义" tabindex="-1"><a class="header-anchor" href="#_1-jq入口函数意义" aria-hidden="true">#</a> 1.JQ入口函数意义=&gt;</h5><ul><li><p>入口函数,通常使用和window.onload一样的功效</p></li><li><p>区别:在jquery文件加载后,同时当前的window下面已经有了$和jq对象后,才开始运行</p></li></ul><hr><h1 id="node叁" tabindex="-1"><a class="header-anchor" href="#node叁" aria-hidden="true">#</a> -----------------------==(NODE叁)==-------------------------</h1><h1 id="cookie、session、图片验证码、jwt的使用-day7-20-21" tabindex="-1"><a class="header-anchor" href="#cookie、session、图片验证码、jwt的使用-day7-20-21" aria-hidden="true">#</a> Cookie、session、图片验证码、jwt的使用=&gt;Day7_20~21</h1><h2 id="一-response-cookie和request-cookie的区别" tabindex="-1"><a class="header-anchor" href="#一-response-cookie和request-cookie的区别" aria-hidden="true">#</a> 一.response.cookie和request.cookie的区别</h2><h5 id="_1-范围特点使用语法各不相同" tabindex="-1"><a class="header-anchor" href="#_1-范围特点使用语法各不相同" aria-hidden="true">#</a> 1.范围特点使用语法各不相同</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>response.cookie：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p>操作过的Cookie，所有方法获取到的都是被更新过的值，也就是说Response.Cookies是修改所有容器中的Cookie的值。</p></li><li><p>用于在客户端写入cookie值。若指定的cookie不存在，则创建它。若存在，则将自动进行更新。结果返回给客户端浏览器。</p></li><li><p>Response.Cookies(CookieName)[(key)|.attribute]=value。这里的CookiesName是指定的Cookie的名称，如果指定了Key，则该Cookie就是一个字典，Attribute属性包括Domain，Expires，HasKeys，Path，Secure。</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>request.cookie：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>创建的Cookie只能用于后台不能用于HTML的前台。</li><li>设置cookie的最大有效期为30天，然后通过Response回送cookie到浏览器。</li><li>Request.Cookies使用语法：Request.Cookies(cookie)[(key)|.attribute]。</li></ol><h2 id="二-cookie代码示范" tabindex="-1"><a class="header-anchor" href="#二-cookie代码示范" aria-hidden="true">#</a> 二.Cookie代码示范</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 设置cookie
 */</span>
<span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> seconds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;进入setCookie逻辑函数&#39;</span><span class="token punctuation">)</span>
    seconds <span class="token operator">=</span> seconds <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//conds有值就直接赋值，没有为0，这个根php不一样。</span>
    <span class="token keyword">var</span> expires <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// cookies随浏览器关闭而失效的方法:</span>
    <span class="token comment">//     如果不设置Expires的属性那么Cookie的存活时间就是在关闭浏览器的时候。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>seconds <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//设置cookie生存时间</span>
        <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>seconds<span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        expires <span class="token operator">=</span> <span class="token string">&quot;; expires=&quot;</span><span class="token operator">+</span>date<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> name<span class="token operator">+</span><span class="token string">&quot;=&quot;</span><span class="token operator">+</span><span class="token function">escape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">+</span>expires<span class="token operator">+</span><span class="token string">&quot;; path=/&quot;</span><span class="token punctuation">;</span>   <span class="token comment">//转码并赋值</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 读取cookie
 */</span>
<span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;进入getCookie逻辑函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> nameEQ <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">&#39;=&#39;</span>
    <span class="token keyword">var</span> ca <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 把cookie分割成组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ca<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">// 取得字符串</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断一下字符串有没有前导空格</span>
            c <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 有的话，从第二位开始取</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>nameEQ<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果含有我们要的name</span>
            <span class="token keyword">return</span> <span class="token function">unescape</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>nameEQ<span class="token punctuation">.</span>length<span class="token punctuation">,</span> c<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 解码并截取我们要值</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 检查cookie
 * <span class="token keyword">@param</span> <span class="token parameter">c_name</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">checkCookie</span><span class="token punctuation">(</span><span class="token parameter">c_name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    username <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>c_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> username <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 清除cookie
 * <span class="token keyword">@param</span> <span class="token parameter">name</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">clearCookie</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setCookie</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-cookie生命周期" tabindex="-1"><a class="header-anchor" href="#三-cookie生命周期" aria-hidden="true">#</a> 三.Cookie生命周期</h2><p>如果要立马失效时间要设置为-1,设置为0为本次浏览器关闭结束生命周期</p><p>如果不设置Expires的属性那么Cookie的存活时间就是在关闭浏览器的时候。</p><h2 id="四-session使用" tabindex="-1"><a class="header-anchor" href="#四-session使用" aria-hidden="true">#</a> 四.session使用</h2><h6 id="_1-session的概念" tabindex="-1"><a class="header-anchor" href="#_1-session的概念" aria-hidden="true">#</a> 1.session的概念=&gt;</h6><p>​ 会话（生命周期：通常是浏览器关了，session就没了，不同的浏览器有不同的session，永久不冲突）</p><h6 id="_2-session的应用-》" tabindex="-1"><a class="header-anchor" href="#_2-session的应用-》" aria-hidden="true">#</a> 2.session的应用--》</h6><p>​ 用来存储会话级别的变量：令牌的解密秘钥等，当前登录的用户的信息（可以给数据拾释压）</p><h6 id="_3-session的使用-》区别于之前我们使用cookie的用法" tabindex="-1"><a class="header-anchor" href="#_3-session的使用-》区别于之前我们使用cookie的用法" aria-hidden="true">#</a> 3.session的使用--》区别于之前我们使用cookie的用法:</h6><ol><li><h6 id="cookie的用法-前后端共享的变量区域" tabindex="-1"><a class="header-anchor" href="#cookie的用法-前后端共享的变量区域" aria-hidden="true">#</a> cookie的用法：前后端共享的变量区域</h6><ol><li><p>获取cookie:由请求对象来实现 2. 操作cookie：包括增删改 由响应对象来实现</p><pre><code>  2. ###### session的用法：只能服务端操作，仅仅是存在在服务端

  	1.  获取由请求对象来获取
  	2.  操作由请求对象来操作
</code></pre></li></ol></li></ol><p>​</p><h6 id="_4-原理解答" tabindex="-1"><a class="header-anchor" href="#_4-原理解答" aria-hidden="true">#</a> 4.原理解答=&gt;</h6><p>就是当访问一个页面的时候给浏览器创建一个独一无二的号码，也给同时创建的session赋予同样的号码。这样就可以在打开同一个网站的第二个页面时获取到第一个页面中session保留下来的对应信息（理解：当访问第二个页面时将号码同时传递到第二个页面。找到对应的session。）。这个号码也叫sessionID，session的ID号码，session的独一无二号码。</p><h6 id="_5-session安装语句" tabindex="-1"><a class="header-anchor" href="#_5-session安装语句" aria-hidden="true">#</a> 5.session安装语句</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> npm install express-session
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_6-配置中间件-app-js" tabindex="-1"><a class="header-anchor" href="#_6-配置中间件-app-js" aria-hidden="true">#</a> 6.配置中间件=&gt;app.js</h6><p>注意 :设置在var app = express();之后,路由之前</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//设置在var app = express();之后</span>
<span class="token comment">//引入session</span>
<span class="token keyword">const</span> session<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express-session&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//配置中间件 maxAge单位为ms</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&quot;keyboard cat&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//maxAge:最多可以存活多久</span>
    <span class="token literal-property property">cookie</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">maxAge</span><span class="token operator">:</span>  <span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_7-express-session使用" tabindex="-1"><a class="header-anchor" href="#_7-express-session使用" aria-hidden="true">#</a> 7.express-session使用</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置session</span>
req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token operator">=</span><span class="token string">&quot;张三&quot;</span>

<span class="token comment">//获取session</span>
req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username

<span class="token comment">//重新设置cookie的过期时间为1s</span>
req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span>maxAge<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>

<span class="token comment">//销毁session</span>
req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五-图片验证码实现" tabindex="-1"><a class="header-anchor" href="#五-图片验证码实现" aria-hidden="true">#</a> 五.图片验证码实现</h2><h6 id="_1-svg安装" tabindex="-1"><a class="header-anchor" href="#_1-svg安装" aria-hidden="true">#</a> 1.svg安装</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install svg-captcha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_2-图片验证码代码" tabindex="-1"><a class="header-anchor" href="#_2-图片验证码代码" aria-hidden="true">#</a> 2.图片验证码代码</h6><p>①前端页面代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>验证码
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://localhost:3000/users/getCaptcha<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>capText<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">captachaValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>验证<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②运行函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">captachaValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    future<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/users/captachaValid&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">captcha</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#capText&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;验证成功&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③路由文件中(routes/users)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> svgCaptcha <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;svg-captcha&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/getCaptcha&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> captcha <span class="token operator">=</span> svgCaptcha<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 翻转颜色</span>
    <span class="token literal-property property">inverse</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// 字体大小</span>
    <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>
    <span class="token comment">// 噪声线条数</span>
    <span class="token literal-property property">noise</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token comment">// 宽度</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
    <span class="token comment">// 高度</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 保存到session,忽略大小写</span>
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>captcha <span class="token operator">=</span> captcha<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>captcha<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0xtg 生成的验证码</span>
  <span class="token comment">//设置什么格式返回前端,默认text格式</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;image/svg+xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//将此数据转成字符串写入传到前端,并且.write并不会结束请求可以多次调用</span>
  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>captcha<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-验证码使用实操" tabindex="-1"><a class="header-anchor" href="#_3-验证码使用实操" aria-hidden="true">#</a> 3.验证码使用实操</h6><ol><li><p>安装npm install svg-captcha</p></li><li><p>直接使用captcha的api</p></li><li><p>直接根据captcha生成的对象做解析</p></li><li><p>幅度段返回验证码之前需要缓存验证码的内容(共后续验证用)</p></li><li><p>完成验证码的点击刷新功能</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://192.168.0.151:3000/users/getCaptcha<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token literal-property property">javascript</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;http://192.168.0.151:3000/users/getCaptcha?v=&#39;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//根据token不同生成不同验证码</span>
obj<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;http://localhost:3000/users/getCaptcha?v=&#39;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;&amp;token=&quot;</span><span class="token operator">+</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="六-拦截器-jwt" tabindex="-1"><a class="header-anchor" href="#六-拦截器-jwt" aria-hidden="true">#</a> 六.拦截器=&gt;jwt</h2><h5 id="_1-jwt安装" tabindex="-1"><a class="header-anchor" href="#_1-jwt安装" aria-hidden="true">#</a> 1.jwt安装</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install jsonwebtoken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-jwt的相关api" tabindex="-1"><a class="header-anchor" href="#_2-jwt的相关api" aria-hidden="true">#</a> 2.jwt的相关api=&gt;</h5><h6 id="a-jwtutils" tabindex="-1"><a class="header-anchor" href="#a-jwtutils" aria-hidden="true">#</a> a.jwtUtils</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 安全拦截器</span>
<span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;jsonwebtoken&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 验证权限
 * <span class="token keyword">@param</span> <span class="token parameter">token</span>
 * <span class="token keyword">@param</span> <span class="token parameter">secretkey</span> 秘钥
 * <span class="token keyword">@param</span> <span class="token parameter">success</span>
 * <span class="token keyword">@param</span> <span class="token parameter">error</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token parameter">token<span class="token punctuation">,</span> secretkey<span class="token punctuation">,</span> success<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secretkey<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> decode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">success</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token doc-comment comment">/**
 * 签名
 * <span class="token keyword">@param</span> <span class="token parameter">load</span> 载荷 json对象 存储存在
 * <span class="token keyword">@param</span> <span class="token parameter">secretkey</span> 秘钥
 * <span class="token keyword">@param</span> <span class="token parameter">expiresIn</span> 过期时间 秒
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>number <span class="token operator">|</span> PromiseLike<span class="token punctuation">&lt;</span>ArrayBuffer<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">sign</span><span class="token punctuation">(</span><span class="token parameter">load<span class="token punctuation">,</span> secretkey<span class="token punctuation">,</span> expiresIn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>load<span class="token punctuation">,</span> secretkey<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">expiresIn</span><span class="token operator">:</span> expiresIn<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> token<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**异步转同步
 * 这个再app.js路由调用中已经转换过一次,所以不用重复转换
 * <span class="token keyword">@param</span> <span class="token parameter">token</span>
 * <span class="token keyword">@param</span> <span class="token parameter">secretkey</span>
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span>any<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">verifysync</span><span class="token punctuation">(</span><span class="token parameter">token<span class="token punctuation">,</span> secretkey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secretkey<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> decode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;绘画已过期&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>verify<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> verifysync<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/*//使用解密
let user={id:111,name:&#39;user&#39;,password:123456};
/!*
//q清空密码
delete user.password;
let token=sign(user,&#39;123456&#39;,10);*!/
//解密
let token=sign(user,&#39;123456&#39;,10);
verify(token,&quot;123456&quot;,function (user) {
    console.log(user);
},function (err) {
    console.error(err)
    }
)
console.log(token);*/</span>
<span class="token comment">/*verify(token,&#39;123456&#39;,function (user) {
    console.log(user)
},function (err) {
    console.error(err);
})*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="b-拦截器中间件" tabindex="-1"><a class="header-anchor" href="#b-拦截器中间件" aria-hidden="true">#</a> b.拦截器中间件=&gt;</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//拦截器中间件,原本</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>resp<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>path <span class="token operator">!=</span><span class="token string">&#39;/mine.html&#39;</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">!=</span><span class="token string">&#39;/user/login&#39;</span> <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>path <span class="token operator">!=</span><span class="token string">&#39;/user/register&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token<span class="token punctuation">;</span>
        safeInterceptor<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span>global<span class="token punctuation">.</span>secretKey<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>sessionData <span class="token operator">=</span> user<span class="token punctuation">;</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>



<span class="token doc-comment comment">/**
 * 全系统允许跨域处理 这段配置要再new出express实例的时候就要设置了，放在所有的api前面，不然没有效果
 */</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//设置允许跨域的域名，*代表允许任意域名跨域</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//允许的header类型</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//跨域允许的请求方式</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;options&#39;</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//让options尝试请求快速结束</span>
    <span class="token keyword">else</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 拦截器中间件,登陆注册功能时修改使用的
 */</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>resp<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> path <span class="token operator">=</span>req<span class="token punctuation">.</span>path<span class="token punctuation">;</span>
    <span class="token comment">//检查路由 决定是否拦截,\`\`\`\`\`\`\`\`\`\`~~~~~~~~!!!!!犯的错误:将除了登陆外的全部拦截了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/users/login&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;登入页面放行&quot;</span><span class="token punctuation">)</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token comment">//从请求头里面拿到令牌==&gt;常规方法</span>
        <span class="token keyword">let</span> token <span class="token operator">=</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//非常规状况(文件下载,是否没办法设置请求头,或者例如获取验证码等)</span>
            token<span class="token operator">=</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>token<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token keyword">await</span> jwtUtils<span class="token punctuation">.</span><span class="token function">verifysync</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span>global<span class="token punctuation">.</span>globalKey<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// resp.status(500)</span>
            resp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>
            <span class="token comment">// throw  new Error(result.msg)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>session<span class="token operator">=</span>result<span class="token punctuation">;</span>
            <span class="token comment">//表示执行下一步动作--&gt;放行</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;成公了&quot;</span><span class="token punctuation">)</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-前后端分离的场景" tabindex="-1"><a class="header-anchor" href="#_3-前后端分离的场景" aria-hidden="true">#</a> 3.前后端分离的场景=&gt;</h5><p>当前用户的身份如果以明文传输,很容易故意被模仿,所以 需要对用户的身份进行加密传输 加密传输的方式: 1)https 2)rsa 非对称加密 3)aes 对称密钥 4)jwt json web token: 目前比较流行的</p><h5 id="_4-jwt的作用" tabindex="-1"><a class="header-anchor" href="#_4-jwt的作用" aria-hidden="true">#</a> 4.jwt的作用=&gt;</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>用来加密门票用的.
加密:1)被加密 2)用什么加密(加盐)
简单版的:密钥共用,但是被加密的东西不一样
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-实际操作" tabindex="-1"><a class="header-anchor" href="#_5-实际操作" aria-hidden="true">#</a> 5.实际操作=&gt;</h5><ol><li>在用户登录成功之后使用jwt对用户的基本信息进行加密(注意要提出密码属性)</li><li>加密之后,将token返回到前端,存储到localStorage</li><li>每次请求,在请求发送之前,将localStorage里头的令牌,当作请求头一起发送</li><li>服务端针对需要验权(鉴权)的api进行定制化拦截(前置拦截器)</li><li>将拦截下来的req里头的令牌取出来,并做解密错做 <ol><li><pre><code> 解密成功:将解密出来的对象,即用户的基本信息对象,并将该基本信息对象存到请求头里去(单线程变量-用时间换空间)
</code></pre></li><li><pre><code> 解密失败:请求结束并报错(会话已经过期,请重新登录,前端的表现通常时直接重定向到登录页面)
</code></pre></li></ol></li><li>执行业务代码,如果执行的过程需要用到用户信息,那么不要再从数据库里头去查询数据,直接从请求捞就行了</li></ol><h1 id="问题与解决一" tabindex="-1"><a class="header-anchor" href="#问题与解决一" aria-hidden="true">#</a> ---------------------==(问题与解决一)==--------------------</h1><h1 id="遇到的问题与解决方法" tabindex="-1"><a class="header-anchor" href="#遇到的问题与解决方法" aria-hidden="true">#</a> 遇到的问题与解决方法=&gt;:</h1><h5 id="_1-为何在字符串中转义不出变量" tabindex="-1"><a class="header-anchor" href="#_1-为何在字符串中转义不出变量" aria-hidden="true">#</a> 1.为何在字符串中转义不出变量</h5><p>​ 问题代码位置=&gt;console.log(&#39;会话ID:\${req.sessionID}&#39;);=&gt;test/users.js=&gt;26</p><p>​ 问题分析=&gt;用错符号,应用模板符号</p><p>​ 问题解决=&gt;使用\`\`而不能用&#39;&#39;</p><h5 id="_2-为什么在后台代码test-users中调用不了public中的自定义-cookieuti-js-js包中的函数" tabindex="-1"><a class="header-anchor" href="#_2-为什么在后台代码test-users中调用不了public中的自定义-cookieuti-js-js包中的函数" aria-hidden="true">#</a> 2.为什么在后台代码test/users中调用不了public中的自定义(CookieUti.js)js包中的函数?</h5><p>​ 问题代码位置=&gt;test/users.js=&gt;35</p><p>​ 问题分析=&gt;在后台代码test/users中调用静态资源中的文件,导致调用错误</p><p>​ 原理剖析=&gt;本质上node是后台代码,其中包括bin/www , routes/users.js||index.js ,node_modules ,app.js ,</p><p>​ package.json都是后台文件, 而public其实是单独的静态文件,它与后台文件是通过共享port端口进行数 据传输,而不能相互调用</p><p>​</p><hr><hr><h1 id="node肆" tabindex="-1"><a class="header-anchor" href="#node肆" aria-hidden="true">#</a> -----------------------==(NODE肆)==-------------------------</h1><h1 id="基于对7-20-21知识点的复习与补充-md-day7-22-23" tabindex="-1"><a class="header-anchor" href="#基于对7-20-21知识点的复习与补充-md-day7-22-23" aria-hidden="true">#</a> 基于对7_20~21知识点的复习与补充.md=&gt;day7_22-23</h1><h2 id="一-对于一个新项目实操准备工作" tabindex="-1"><a class="header-anchor" href="#一-对于一个新项目实操准备工作" aria-hidden="true">#</a> 一.对于一个新项目实操准备工作</h2><h6 id="_1、重新配置app-js" tabindex="-1"><a class="header-anchor" href="#_1、重新配置app-js" aria-hidden="true">#</a> 1、重新配置app.js</h6><ol><li><p>配置全局异常处理拦截器（后置拦截器）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> res.status(err.status || 500);
/*
*  ①配置全局异常处理拦截器(后置拦截器)
* */
 res.render(err.message);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置全局请求拦截器（前置拦截器）--后面一起讲（jwt）</p></li></ol><h6 id="_2、基于public构建同域前端" tabindex="-1"><a class="header-anchor" href="#_2、基于public构建同域前端" aria-hidden="true">#</a> 2、基于public构建同域前端</h6><ol><li>public作为静态的目录文件夹是可以配置的</li><li>静态目录里头的文件和服务端的文件是要区分开来的，不具备相互引用的能力 <ol><li>静态目录里头的文件最终都是在客户端被访问</li><li>服务端里头的文件只提供服务，不提供文件的访问</li><li>静态文件和服务端的文件之间的交互要通过http请求来实现（ajax fetch axios）</li></ol></li></ol><h6 id="_3-使用session" tabindex="-1"><a class="header-anchor" href="#_3-使用session" aria-hidden="true">#</a> 3. 使用session</h6><p>​ 使用express-session来操作服务端的session</p><p>​ 安装：npm install express-session</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*引用session
* */
let session=require(&#39;express-session&#39;)
/*
*session配置
* */
app.use(session({
    secret:&quot;keyboard cat&quot;
}))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4-验证码" tabindex="-1"><a class="header-anchor" href="#_4-验证码" aria-hidden="true">#</a> 4. 验证码</h6><ol><li><p>① 安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install svg-captcha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>直接使用captcha的api</p></li><li><p>直接根据captcha生成的对象做解析</p></li><li><p>幅度段返回验证码之前需要缓存验证码的内容(共后续验证用)</p></li><li><p>完成验证码的点击刷新功能</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//  &lt;img src=&quot;http://192.168.0.151:3000/users/getCaptcha&quot; onclick=&quot;javascript:this.setAttribute(&#39;src&#39;,&#39;http://192.168.0.151:3000/users/getCaptcha?v=&#39;+new Date().getTime())&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二-重要准则" tabindex="-1"><a class="header-anchor" href="#二-重要准则" aria-hidden="true">#</a> 二.重要准则</h2><h6 id="_1-很重要的准则" tabindex="-1"><a class="header-anchor" href="#_1-很重要的准则" aria-hidden="true">#</a> 1.很重要的准则：</h6><ol><li>指令可以也应该要全局安装</li><li>依赖通常是装在局部，（没办法确保项目和全局的目录是一个侄子和叔叔的关系）</li></ol><h6 id="_2-require引用包的一个次序。" tabindex="-1"><a class="header-anchor" href="#_2-require引用包的一个次序。" aria-hidden="true">#</a> 2.require引用包的一个次序。</h6><ol><li>主要理解 省略后缀名的场景和 node_modules找包的一个次序（从里往外）</li></ol><p>​</p><p>​</p><hr><h1 id="node伍" tabindex="-1"><a class="header-anchor" href="#node伍" aria-hidden="true">#</a> -----------------------==(NODE伍)==-------------------------</h1><h1 id="promise-await-async概念及简单应用-day7-23" tabindex="-1"><a class="header-anchor" href="#promise-await-async概念及简单应用-day7-23" aria-hidden="true">#</a> Promise+await+async概念及简单应用=&gt;Day7_23</h1><h2 id="一-promise" tabindex="-1"><a class="header-anchor" href="#一-promise" aria-hidden="true">#</a> 一.Promise</h2><h5 id="_1-promise作用" tabindex="-1"><a class="header-anchor" href="#_1-promise作用" aria-hidden="true">#</a> 1.Promise作用:</h5><blockquote><h6 id="用来解决回调地狱问题-但是只是简单的改变格式-并没有彻底解决上面的问题真正要解决上述问题-一定要利用promise再加上await和async关键字实现异步传同步" tabindex="-1"><a class="header-anchor" href="#用来解决回调地狱问题-但是只是简单的改变格式-并没有彻底解决上面的问题真正要解决上述问题-一定要利用promise再加上await和async关键字实现异步传同步" aria-hidden="true">#</a> 用来解决回调地狱问题，但是只是简单的改变格式，并没有彻底解决上面的问题真正要解决上述问题，一定要利用promise再加上await和async关键字实现异步传同步</h6></blockquote><h5 id="_2-promise运行" tabindex="-1"><a class="header-anchor" href="#_2-promise运行" aria-hidden="true">#</a> 2.Promise运行=&gt;</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//new的时候方法体就立刻运行</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//业务代码}）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-promise的参数解释" tabindex="-1"><a class="header-anchor" href="#_3-promise的参数解释" aria-hidden="true">#</a> 3.Promise的参数解释=&gt;</h5><ol><li><p>resolve:表示方法体里头执行成功之后的回调函数</p></li><li><p>reject:表示方法体里头出错后的回调函数</p></li><li><p>Function(函数):支持多层嵌套的回调函数作为方法体内容</p></li></ol><h5 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h5><h2 id="二-promise-await-async" tabindex="-1"><a class="header-anchor" href="#二-promise-await-async" aria-hidden="true">#</a> 二.Promise+await+async=&gt;</h2><h5 id="_1-promise-异步" tabindex="-1"><a class="header-anchor" href="#_1-promise-异步" aria-hidden="true">#</a> 1)Promise==&gt;异步</h5><h5 id="_2-await-异步转同步" tabindex="-1"><a class="header-anchor" href="#_2-await-异步转同步" aria-hidden="true">#</a> 2)await==&gt;异步转同步</h5><p>​ 1.await 可以理解为是 async wait 的简写。await 必须出现在 async 函数内部，不能单独使用。</p><p>​ 2.await 后面可以跟任何的JS 表达式。虽然说 await 可以等很多类型的东西，但是它最主要的意图是用来等待 Promise 对象的状态被 resolved。如果await的是 promise对象会造成异步函数停止执行并且等待 promise 的 解决,如果等的是正常的表达式则立即执行。</p><h5 id="_3-async-同步转异步" tabindex="-1"><a class="header-anchor" href="#_3-async-同步转异步" aria-hidden="true">#</a> 3)async==&gt;同步转异步</h5><ol><li>方法体内部的某个表达式使用await修饰，那么这个方法体所属方法必须要用async修饰所以使用awit方法会自动升级为异步方法</li></ol><h1 id="node陆" tabindex="-1"><a class="header-anchor" href="#node陆" aria-hidden="true">#</a> -----------------------==(NODE陆)==------------------------</h1><h1 id="redis-mysql数据库安装以及使用-day-7-25" tabindex="-1"><a class="header-anchor" href="#redis-mysql数据库安装以及使用-day-7-25" aria-hidden="true">#</a> Redis+Mysql数据库安装以及使用 =&gt;Day_7_25</h1><h2 id="一-redis-远程字典服务" tabindex="-1"><a class="header-anchor" href="#一-redis-远程字典服务" aria-hidden="true">#</a> 一.Redis(远程字典服务)</h2><h3 id="_1-redis的特点" tabindex="-1"><a class="header-anchor" href="#_1-redis的特点" aria-hidden="true">#</a> 1.Redis的特点:</h3><p>1)工作的时候用的是以内存作为储存媒介,支持持久化</p><h3 id="_2-redis的优点" tabindex="-1"><a class="header-anchor" href="#_2-redis的优点" aria-hidden="true">#</a> 2.Redis的优点:</h3><h6 id="_1-速度快" tabindex="-1"><a class="header-anchor" href="#_1-速度快" aria-hidden="true">#</a> 1.速度快</h6><blockquote><p>​ (1) 因为数据存在内存中，类似于 HashMap ，HashMap 的优势就是查找和操作的时间复杂度都是O (1) 。 (2) Redis 本质上是一个 Key-Value 类型的内存数据库，很像Memcached ，整个数据库统统加载在内存当中进行操作，定期通过<strong>异步操作</strong>把数据库数据 flush 到硬盘上进行保存。fork子进程持久化。 (3) 因为是纯内存操作，Redis 的性能非常出色，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value 数据库。</p></blockquote><h6 id="_2-支持丰富数据类型-string-list-set-sorted-set-hash-。" tabindex="-1"><a class="header-anchor" href="#_2-支持丰富数据类型-string-list-set-sorted-set-hash-。" aria-hidden="true">#</a> 2.支持丰富数据类型: String ，List，Set，Sorted Set，Hash 。</h6><blockquote><p>Redis 的出色之处不仅仅是性能，Redis 最大的魅力是支持保存多种数据结构，此外单个 Value 的最大限制是1GB，不像 Memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能</p></blockquote><h6 id="_3-丰富的特性" tabindex="-1"><a class="header-anchor" href="#_3-丰富的特性" aria-hidden="true">#</a> 3.丰富的特性</h6><blockquote><p>订阅发布 Pub / Sub 功能 Key 过期策略 事务 支持多个 DB 计数</p></blockquote><h6 id="_4-持久化存储" tabindex="-1"><a class="header-anchor" href="#_4-持久化存储" aria-hidden="true">#</a> 4.持久化存储</h6><blockquote><p>Redis 提供 RDB 和 AOF 两种数据的持久化存储方案，解决内存数据库最担心的万一 Redis 挂掉，数据会消失掉。</p></blockquote><h3 id="_3-redis的缺点" tabindex="-1"><a class="header-anchor" href="#_3-redis的缺点" aria-hidden="true">#</a> 3.Redis的缺点:</h3><blockquote><p>1.由于 Redis 是内存数据库，所以，单台机器，存储的数据量，跟机器本身的内存大小。虽然 Redis 本身有Key 过期策略，但是还是需要提前预估和节约内存。如果内存增长过快，需要定期删除数据。</p><p>2.redis是单线程的，单台服务器无法充分利用多核服务器的CPU</p></blockquote><h3 id="_4-redis-window-64bit-版本的使用" tabindex="-1"><a class="header-anchor" href="#_4-redis-window-64bit-版本的使用" aria-hidden="true">#</a> 4.Redis -window 64bit 版本的使用=&gt;</h3><h5 id="_1-安装-免安装" tabindex="-1"><a class="header-anchor" href="#_1-安装-免安装" aria-hidden="true">#</a> 1.安装:免安装</h5><h5 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2.使用:</h5><h6 id="_1-双击redis-server-exe" tabindex="-1"><a class="header-anchor" href="#_1-双击redis-server-exe" aria-hidden="true">#</a> 1.双击redis-server.exe</h6><blockquote><p>Q: 如果启动报错建议查看错误日志(最难的bug,最难的是除了bug,没有bug)</p><ul><li><pre><code>      eg:没有找到配置文件
</code></pre></li><li><pre><code>      解决措施:基于cmd运行下面命令来解决(显卡的指定配置0)
</code></pre></li><li><pre><code>      redis-server.exe redis.window-service.conf(解释:指定以后面那个位置)
</code></pre></li></ul></blockquote><h6 id="_2-redis-cli-exe双击-客户端测试时候使用" tabindex="-1"><a class="header-anchor" href="#_2-redis-cli-exe双击-客户端测试时候使用" aria-hidden="true">#</a> 2.redis-cli.exe双击(客户端测试时候使用)</h6><h6 id="_3-熟练掌握两个命令-set-key-value-get-key" tabindex="-1"><a class="header-anchor" href="#_3-熟练掌握两个命令-set-key-value-get-key" aria-hidden="true">#</a> 3.熟练掌握两个命令: set key value , get key</h6><h3 id="_5-实际操作-基于node来连接redis" tabindex="-1"><a class="header-anchor" href="#_5-实际操作-基于node来连接redis" aria-hidden="true">#</a> 5.实际操作(基于node来连接redis)=&gt;</h3><h6 id="_1-安装node-的redis-的依赖包-npm-install-redis" tabindex="-1"><a class="header-anchor" href="#_1-安装node-的redis-的依赖包-npm-install-redis" aria-hidden="true">#</a> 1.安装node 的redis 的依赖包, npm install redis</h6><h6 id="_2-熟练调度redis的基本api" tabindex="-1"><a class="header-anchor" href="#_2-熟练调度redis的基本api" aria-hidden="true">#</a> 2.熟练调度redis的基本api</h6><h6 id="_3-登陆成功后将用户的信息存储在redis里头-取而代之不用session" tabindex="-1"><a class="header-anchor" href="#_3-登陆成功后将用户的信息存储在redis里头-取而代之不用session" aria-hidden="true">#</a> 3.登陆成功后将用户的信息存储在redis里头,取而代之不用session</h6><h6 id="_4-每次获取用户具体的信息的时候不走数据库-直接走redis" tabindex="-1"><a class="header-anchor" href="#_4-每次获取用户具体的信息的时候不走数据库-直接走redis" aria-hidden="true">#</a> 4.每次获取用户具体的信息的时候不走数据库,直接走redis</h6><h3 id="_6-redisutil-封装工具包" tabindex="-1"><a class="header-anchor" href="#_6-redisutil-封装工具包" aria-hidden="true">#</a> 6.redisUtil(封装工具包)=&gt;</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> client <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// const client = redis.createClient();</span>
<span class="token comment">//获取当前db中所有的key</span>
<span class="token comment">// function getdbnamelist(){</span>
<span class="token comment">//     // 相当于命令（keys *）, 返回list，包含当前db所有key的名字</span>
<span class="token comment">//     client.keys(&#39;*&#39;,function(err,val){</span>
<span class="token comment">//         console.log(val);</span>
<span class="token comment">//         //callback(val);</span>
<span class="token comment">//     });</span>
<span class="token comment">// }</span>

<span class="token doc-comment comment">/**
 * 设置键值
 * <span class="token keyword">@param</span> <span class="token parameter">dbNum</span> 库号
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> 键
 * <span class="token keyword">@param</span> <span class="token parameter">value</span> 值
 * <span class="token keyword">@param</span> <span class="token parameter">expire</span> 过期时间（单位：秒，可为空，为空则不过期）
 */</span>
<span class="token keyword">let</span> <span class="token function-variable function">set</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>expire<span class="token punctuation">,</span>dbNum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[redis]set key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  value=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  expire=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>expire<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  dbNum=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dbNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dbNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dbNum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>dbNum<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置库</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;redis set 选库失败：&#39;</span><span class="token operator">+</span>err<span class="token punctuation">)</span>
                <span class="token comment">// throw new Error(&#39;redis set 选库失败：&#39;+err);</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置值</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;redis插入失败：&#39;</span><span class="token operator">+</span>err<span class="token punctuation">)</span>
                        <span class="token comment">// throw new Error(&#39;redis插入失败：&#39;+err);</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> expire<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            client<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置过期时间</span>
                        <span class="token punctuation">}</span>
                        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 获取缓存
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">dbNum</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">&lt;</span><span class="token operator">*</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">let</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> dbNum</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[redis]get key=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> dbNum=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>dbNum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dbNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dbNum <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>   <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>dbNum<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//链接库</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;redis set 选库失败：&#39;</span><span class="token operator">+</span>err<span class="token punctuation">)</span>
                <span class="token comment">// throw new Error(&#39;redis get 选库失败：&#39;+err);</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取值</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;redis读取失败：&#39;</span><span class="token operator">+</span>err<span class="token punctuation">)</span>
                        <span class="token comment">// throw new Error(&#39;redis get 获取失败：&#39;+err);</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    get<span class="token punctuation">,</span>
    set<span class="token punctuation">,</span>
    <span class="token comment">// getays</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-mysql-关系型数据库管理系统" tabindex="-1"><a class="header-anchor" href="#二-mysql-关系型数据库管理系统" aria-hidden="true">#</a> 二.Mysql(关系型数据库管理系统)</h2><h3 id="_1-安装mysql准备工作" tabindex="-1"><a class="header-anchor" href="#_1-安装mysql准备工作" aria-hidden="true">#</a> 1.安装Mysql准备工作</h3><blockquote><p>选择引擎（innoDB(支持十五，通常我们会使用innoDB) Myisam Memory(内存数据库)） 选择编码 （一定要用UTF-8） mysql 版本：目前使用5.7版本 安装（服务端）： 安装（客户端）： REPL(mysql -u 用户名 -p 回车 再输入密码) NAVICATE (破解) NAVITOR (功能比较齐全，需自己下载)</p></blockquote><h3 id="_2-mysql的运行原理" tabindex="-1"><a class="header-anchor" href="#_2-mysql的运行原理" aria-hidden="true">#</a> 2.mysql的运行原理:</h3><pre><code>&gt; 分析器
       优化器
       执行器(缓存)
</code></pre><h3 id="_3-实际操作" tabindex="-1"><a class="header-anchor" href="#_3-实际操作" aria-hidden="true">#</a> 3.实际操作=&gt;</h3><h6 id="_1-实现客户端连接数据库" tabindex="-1"><a class="header-anchor" href="#_1-实现客户端连接数据库" aria-hidden="true">#</a> 1.实现客户端连接数据库</h6><h6 id="_2-基于客户端完成一张表的创建和配置过程" tabindex="-1"><a class="header-anchor" href="#_2-基于客户端完成一张表的创建和配置过程" aria-hidden="true">#</a> 2.基于客户端完成一张表的创建和配置过程</h6><h6 id="_3-基于客户端完成mysql语法的基本讲解" tabindex="-1"><a class="header-anchor" href="#_3-基于客户端完成mysql语法的基本讲解" aria-hidden="true">#</a> 3.基于客户端完成mysql语法的基本讲解</h6><h6 id="_4-node来操作数据库" tabindex="-1"><a class="header-anchor" href="#_4-node来操作数据库" aria-hidden="true">#</a> 4.NODE来操作数据库=&gt;</h6><blockquote><pre><code>4.1下载mysql的包
  	  4.2实现node操作mysql的api
   	 4.3实现用户注册-用户信息入库保存
        4.4实现用户登录-根据数据库用户信息验证合法性
  	 4.5实现获取当前用户的全部信息的功能
</code></pre></blockquote><h3 id="_4-数据类型" tabindex="-1"><a class="header-anchor" href="#_4-数据类型" aria-hidden="true">#</a> 4.数据类型</h3><h5 id="_1-js基础数据类型" tabindex="-1"><a class="header-anchor" href="#_1-js基础数据类型" aria-hidden="true">#</a> 1.js基础数据类型</h5><blockquote><p>Boolean Number Undefined Object String Function</p></blockquote><h5 id="_2-数据库基本数据类型" tabindex="-1"><a class="header-anchor" href="#_2-数据库基本数据类型" aria-hidden="true">#</a> 2.数据库基本数据类型</h5><blockquote><p>tinyint =&gt;boolean int =&gt;int varchar(length-&gt;长度参数）) =&gt;String mediumtext ==&gt;长文本 datetime=&gt; 时间Date类型</p></blockquote><h3 id="_5-数据库自动填入创建时间" tabindex="-1"><a class="header-anchor" href="#_5-数据库自动填入创建时间" aria-hidden="true">#</a> 5.数据库自动填入创建时间</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//在时间戳那个数据默认中输入，表示自动填入时间
		CURRENT_TIMESTAMP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-mysql入门" tabindex="-1"><a class="header-anchor" href="#_6-mysql入门" aria-hidden="true">#</a> 6.Mysql入门</h3><h6 id="_1-mysql入门教学-概念" tabindex="-1"><a class="header-anchor" href="#_1-mysql入门教学-概念" aria-hidden="true">#</a> 1.mysql入门教学-概念</h6><blockquote><p>数据库=》excel</p><p>表 =》sheet</p><p>字段=》字段</p><p>主键 =》如果某个字段是逐渐，那么要求该字段的内容不能为空且不重复</p><p>非空=》要求这个字段不嫩为空</p></blockquote><p>2.mysql入门教学-基础数据库语句=&gt;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>创建数据库：create database db_name character <span class="token keyword">set</span> utf8<span class="token punctuation">;</span>
删除数据库：drop database db_name<span class="token punctuation">;</span>
切换数据库：use dbname
创建表：create table <span class="token function">student</span><span class="token punctuation">(</span>id int primary key comment<span class="token string">&#39;这里写注释&#39;</span><span class="token punctuation">,</span>name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sex <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>address <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
删除表：drop table tb_name1<span class="token punctuation">,</span>tb_name2<span class="token punctuation">;</span>
写入数据：全字段写入
insert into student <span class="token function">values</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">,</span><span class="token string">&#39;刘亦菲&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;湖北武汉&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">002</span><span class="token punctuation">,</span><span class="token string">&#39;杨幂&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;北京&#39;</span><span class="token punctuation">)</span>；
写入数据：可选字段写入，其他字段自增或有默认值
insert into <span class="token function">student</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>address<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token string">&#39;刘亦菲&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;湖北&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;杨幂&#39;</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token string">&#39;北京&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;刘诗诗&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;北京&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
删除数据：<span class="token keyword">delete</span> from tbname where 条件，只删数据，不删结构
<span class="token keyword">delete</span> from student where id<span class="token operator">=</span><span class="token number">003</span><span class="token punctuation">;</span>
修改数据：update student <span class="token keyword">set</span> key<span class="token operator">=</span>value<span class="token punctuation">,</span>key2<span class="token operator">=</span>value2 where 条件
update student <span class="token keyword">set</span> address<span class="token operator">=</span><span class="token string">&#39;湖北&#39;</span> where id<span class="token operator">=</span><span class="token number">001</span><span class="token punctuation">;</span>
查看数据：select 字段<span class="token number">1</span>，字段<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span> from tbname；
select <span class="token operator">*</span> from student<span class="token punctuation">;</span>
查看表的结构：desc tbname；
修改表名：alter table tb_name rename to tb_name_new<span class="token punctuation">;</span>
<span class="token function">修改字段</span><span class="token punctuation">(</span>包括名称，类型，约束<span class="token punctuation">)</span>：alter table tb_name change column_name column_name_new 数据类型 约束<span class="token punctuation">;</span>
例：alter table student change sex 性别 <span class="token function">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> not <span class="token keyword">null</span> <span class="token keyword">default</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">;</span>
修改字段类型：alter table tb_name modify column_name 修改后的字段类型；
添加字段：alter table 表名 add 字段名 数据类型 约束 <span class="token function">字段位置</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>或者after xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
例：alter table tb_name add column_name decimal not <span class="token keyword">null</span> after cno<span class="token punctuation">;</span>第一个则用first
删除字段：alter table tb_name drop column_name；
修改字段的默认值：alter table tb_name alter column_name <span class="token keyword">set</span> Default <span class="token number">666</span><span class="token punctuation">;</span>
删除字段的默认值：alter table tb_name alter column_name drop Default<span class="token punctuation">;</span>
查看建表命令：show create table tbname；内含表的编码格式
修改数据库编码格式：alter database <span class="token operator">&lt;</span>数据库名<span class="token operator">&gt;</span> character <span class="token keyword">set</span> utf8<span class="token punctuation">;</span>
修改表的编码格式：alter table 表名 convert to character <span class="token keyword">set</span> utf8<span class="token punctuation">;</span>
<span class="token comment">//笔记记载</span>
查询用户信息
获取 id为<span class="token number">1</span>并且account为a的用户信息
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">user</span><span class="token template-punctuation string">\`</span></span> a <span class="token constant">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token constant">AND</span> account <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
获取到的信息分页  第几个开始，每页的个数
<span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">user</span><span class="token template-punctuation string">\`</span></span> <span class="token constant">LIMIT</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>
<span class="token comment">//根据密码分组</span>
<span class="token constant">SELECT</span> <span class="token constant">COUNT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pwd <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">user</span><span class="token template-punctuation string">\`</span></span> <span class="token constant">GROUP</span> <span class="token constant">BY</span> pwd
<span class="token comment">//左连接</span>
<span class="token constant">SELECT</span> a<span class="token punctuation">.</span>name <span class="token constant">AS</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token constant">AS</span> <span class="token string">&#39;课程&#39;</span> <span class="token constant">FROM</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">user</span><span class="token template-punctuation string">\`</span></span> a <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> lesson b <span class="token constant">ON</span> a<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>user_id
<span class="token comment">//更新修改</span>
<span class="token constant">UPDATE</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">user</span><span class="token template-punctuation string">\`</span></span> <span class="token constant">SET</span> pwd<span class="token operator">=</span><span class="token string">&#39;1231&#39;</span> <span class="token constant">WHERE</span> id <span class="token operator">=</span><span class="token string">&#39;1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-mysqlutil-数据库工具包" tabindex="-1"><a class="header-anchor" href="#_7-mysqlutil-数据库工具包" aria-hidden="true">#</a> 7.mysqlUtil(数据库工具包)=&gt;</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 操作数据库模块 扫地僧 2019年5月30日19:58:46</span>
<span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> logPrefix<span class="token operator">=</span>mysql
<span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span>     <span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span>     <span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span> <span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span>     <span class="token operator">:</span> <span class="token string">&#39;3306&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span> <span class="token operator">:</span> <span class="token string">&#39;xunke725&#39;</span><span class="token comment">//数据库名称</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 增删改查 通用组件  同步写法
 *
 * <span class="token keyword">@param</span> <span class="token parameter">sql</span> 增删改查sql 含占位符
 * <span class="token keyword">@param</span> <span class="token parameter">params</span> 跟占位符顺序匹配的参数数组，要求跟sql的占位符数量一样多
 */</span>
<span class="token keyword">let</span> <span class="token function-variable function">exec</span> <span class="token operator">=</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sql<span class="token punctuation">,</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 返回一个 Promise</span>
        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">//query执行sql语句</span>
                    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

                        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                          <span class="token comment">//  reject(err)</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>logPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">result : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">// 结束会话 释放链接</span>
                        connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 将所有的参数格式化成数组 参数是可变参数（可变参数在函数声明的时候不写）
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">let</span> <span class="token function-variable function">formatParams</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">//js中有个变量arguments,可以访问所有传入的值</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>exec<span class="token punctuation">,</span> formatParams<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-我的数据库线程池封装代码" tabindex="-1"><a class="header-anchor" href="#_8-我的数据库线程池封装代码" aria-hidden="true">#</a> 8.我的数据库线程池封装代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&#39;3306&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;vue_store&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// timezone: &#39;+08:00&#39; //东八时区</span>
    <span class="token literal-property property">timezone</span><span class="token operator">:</span> <span class="token string">&#39;local&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token doc-comment comment">/**
 *
 * 自己封装的数据模型的基类
 * 封装了数据库操作
 */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 通用查询方法
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">sql</span> 要执行的SQL语句
     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">}</span></span> <span class="token parameter">params</span> 给SQL语句的占位符进行赋值的参数数组
     */</span>
    <span class="token keyword">static</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">sql<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                    connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">//query执行sql语句</span>
                    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token comment">//在外部用catch截取</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                             <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                        <span class="token comment">// 结束会话 释放链接</span>
                        connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">formatParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//js中有个变量arguments,可以访问所有传入的值</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> array<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="问题与解决二" tabindex="-1"><a class="header-anchor" href="#问题与解决二" aria-hidden="true">#</a> --------------------==(问题与解决二)==------------------</h1><h1 id="遇到问题以及解决-项目day7-25-redis-mysql" tabindex="-1"><a class="header-anchor" href="#遇到问题以及解决-项目day7-25-redis-mysql" aria-hidden="true">#</a> 遇到问题以及解决(项目day7_25_Redis_Mysql)=&gt;</h1><h4 id="_1-控制台报错error-expected-payload-to-be-a-plain-object" tabindex="-1"><a class="header-anchor" href="#_1-控制台报错error-expected-payload-to-be-a-plain-object" aria-hidden="true">#</a> 1.控制台报错Error: Expected &quot;payload&quot; to be a plain object</h4><p>​ 1.问题出现场景</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//sign第一个参数必须是对象 \`\`\`\`\`\`\`\`\`\`\`!!!!!!!!!!!!!!!!!重点</span>
<span class="token comment">//犯的错误:传入第一个参数其实并没有转化好导致报错</span>
resp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>jwtUtils<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span>loginSuss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span>global<span class="token punctuation">.</span>globalKey<span class="token punctuation">,</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2)解决方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>拦截器<span class="token punctuation">,</span>传入参数错误
<span class="token operator">*</span>错误代码：
<span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;app.get(superSecret)&#39;</span><span class="token punctuation">,</span>
解决代码：
<span class="token keyword">var</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ‘app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>superSecret<span class="token punctuation">)</span>’<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-控制台报错uncaught-typeerror-cannot-read-property-setitem-of-undefined" tabindex="-1"><a class="header-anchor" href="#_2-控制台报错uncaught-typeerror-cannot-read-property-setitem-of-undefined" aria-hidden="true">#</a> 2.控制台报错Uncaught TypeError: Cannot read property &#39;setItem&#39; of undefined</h4><p>1)问题出现场景</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//localStorage写成localstorage导致变成声明一个window变量</span>
window<span class="token punctuation">.</span>localstorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2)解决方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//登陆成功后写入localStorage的token ~~~~~!!!!!!!!S未大写</span>
window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-由于将登录以外的路径拦截-导致图片验证码以及其他的都无效且不显示" tabindex="-1"><a class="header-anchor" href="#_3-由于将登录以外的路径拦截-导致图片验证码以及其他的都无效且不显示" aria-hidden="true">#</a> 3.由于将登录以外的路径拦截 导致图片验证码以及其他的都无效且不显示</h4><p>1)问题出现场景</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//检查路由 决定是否拦截,\`\`\`\`\`\`\`\`\`\`~~~~~~~~!!!!!犯的错误:将除了登陆外的全部拦截了</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/users/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2)解决方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//此处我将所有user的路径暂时都放出来</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/users/login&#39;</span><span class="token punctuation">)</span><span class="token operator">||</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-promise-await-async的使用相关问题" tabindex="-1"><a class="header-anchor" href="#_4-promise-await-async的使用相关问题" aria-hidden="true">#</a> 4.Promise+await+async的使用相关问题</h4><p>1)问题出现场景</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">login</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>resp</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> loginSuss<span class="token operator">=</span>  mysqlUtil<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>loginSql<span class="token punctuation">,</span>mysqlUtil<span class="token punctuation">.</span><span class="token function">formatParams</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2)解决</p><p>mysqlUtil.exec()内是一个Promise,需要await异步转同步,否出得到的返回值将会是一个挂起的Promise对象</p><p>加完后要在外部login函数上加async,将整体转为异步方法,内部由await也必须加上这个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">login</span><span class="token operator">=</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>resp</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
<span class="token keyword">let</span> loginSuss<span class="token operator">=</span> <span class="token keyword">await</span> mysqlUtil<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>loginSql<span class="token punctuation">,</span>mysqlUtil<span class="token punctuation">.</span><span class="token function">formatParams</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="node柒" tabindex="-1"><a class="header-anchor" href="#node柒" aria-hidden="true">#</a> -----------------------==(NODE柒)==------------------------</h1><h1 id="pm2-、nginx的概念与使用-day7-27-28" tabindex="-1"><a class="header-anchor" href="#pm2-、nginx的概念与使用-day7-27-28" aria-hidden="true">#</a> pm2 、nginx的概念与使用=&gt;Day7_27~28</h1><h3 id="一-pm2命令" tabindex="-1"><a class="header-anchor" href="#一-pm2命令" aria-hidden="true">#</a> 一.pm2命令</h3><h5 id="_1-pm2的使用" tabindex="-1"><a class="header-anchor" href="#_1-pm2的使用" aria-hidden="true">#</a> 1.pm2的使用</h5><blockquote><p>进程守卫: 1.监控当前的项目的资源的消耗情况 2.实现对当前的项目的热部署</p></blockquote><h5 id="_2-实际操作" tabindex="-1"><a class="header-anchor" href="#_2-实际操作" aria-hidden="true">#</a> 2..实际操作</h5><h6 id="_1-pm2安装" tabindex="-1"><a class="header-anchor" href="#_1-pm2安装" aria-hidden="true">#</a> 1.pm2安装</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	 npm install  pm2 -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_2-检验是否由安装成功" tabindex="-1"><a class="header-anchor" href="#_2-检验是否由安装成功" aria-hidden="true">#</a> 2.检验是否由安装成功:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> npm list 包名 -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_3-了解下面的命令的使用以及顺序" tabindex="-1"><a class="header-anchor" href="#_3-了解下面的命令的使用以及顺序" aria-hidden="true">#</a> 3.了解下面的命令的使用以及顺序</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    pm2 init    				##创建pm2配置文件
    pm2 start bin/www   ##启动服务器 bin/www表示要运行的脚本,express项目就
    pm2 list            ##查看运行状态
    pm2 log             ##查看日志
    pm2 restart www     ##重启应用 www是 pm2启动进程的名称
    pm2 stop www        ##停止应用 www是 pm2启动进程的名称(也可以输入id)
    pm2 delete www      ##卸载应用(即终止运行) www是 pm2启动进程的名称(也可以输入id)
    pm2 monit           ##实时监控cpu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_4-ecosystem-config-js修改" tabindex="-1"><a class="header-anchor" href="#_4-ecosystem-config-js修改" aria-hidden="true">#</a> 4.ecosystem.config.js修改</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">apps</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">//删除apps里面所有元素,这些都是多余的,然后添加以下元素</span>
      <span class="token punctuation">{</span>
          <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token string">&#39;bin/www&#39;</span><span class="token punctuation">,</span>
          <span class="token comment">//监听</span>
          <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-nginx" tabindex="-1"><a class="header-anchor" href="#二-nginx" aria-hidden="true">#</a> 二.<strong>Nginx</strong></h3><h4 id="_1-了解nginx" tabindex="-1"><a class="header-anchor" href="#_1-了解nginx" aria-hidden="true">#</a> 1. 了解Nginx:</h4>`,281),r={href:"https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7/10002835",target:"_blank",rel:"noopener noreferrer"},d={href:"https://baike.baidu.com/item/Web/150564",target:"_blank",rel:"noopener noreferrer"},k={href:"https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488",target:"_blank",rel:"noopener noreferrer"},v={href:"https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/111106",target:"_blank",rel:"noopener noreferrer"},m={href:"https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806",target:"_blank",rel:"noopener noreferrer"},h={href:"https://baike.baidu.com/item/%E4%BA%AC%E4%B8%9C/210931",target:"_blank",rel:"noopener noreferrer"},b={href:"https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA/125692",target:"_blank",rel:"noopener noreferrer"},g={href:"https://baike.baidu.com/item/%E7%BD%91%E6%98%93/185754",target:"_blank",rel:"noopener noreferrer"},f={href:"https://baike.baidu.com/item/%E8%85%BE%E8%AE%AF/112204",target:"_blank",rel:"noopener noreferrer"},x={href:"https://baike.baidu.com/item/%E6%B7%98%E5%AE%9D/145661",target:"_blank",rel:"noopener noreferrer"},y=t(`<h4 id="_2-nginx的作用" tabindex="-1"><a class="header-anchor" href="#_2-nginx的作用" aria-hidden="true">#</a> 2.Nginx的作用:</h4><blockquote><p>1)反向代理解决跨域问题 2)负载均衡 3)翻墙......</p></blockquote><h4 id="_3-nginx的三个bat文件" tabindex="-1"><a class="header-anchor" href="#_3-nginx的三个bat文件" aria-hidden="true">#</a> 3.Nginx的三个bat文件=&gt;</h4><h6 id="_3-1-start-bat" tabindex="-1"><a class="header-anchor" href="#_3-1-start-bat" aria-hidden="true">#</a> 3.1)start.bat=&gt;</h6><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>start nginx -c ./conf/nginx.conf
echo success
pause
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-2-stop-bat" tabindex="-1"><a class="header-anchor" href="#_3-2-stop-bat" aria-hidden="true">#</a> 3.2)stop.bat=&gt;</h6><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>nginx.exe -s stop
echo success
pause
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3-3-reload-bat" tabindex="-1"><a class="header-anchor" href="#_3-3-reload-bat" aria-hidden="true">#</a> 3.3)reload.bat=&gt;</h6><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>nginx.exe -s reload
echo success
pause
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-nginx实操" tabindex="-1"><a class="header-anchor" href="#_4-nginx实操" aria-hidden="true">#</a> 4.Nginx实操=&gt;</h4><h6 id="_4-1-配置start-bat-stop-bat-reload-bat" tabindex="-1"><a class="header-anchor" href="#_4-1-配置start-bat-stop-bat-reload-bat" aria-hidden="true">#</a> 4.1)配置start.bat stop.bat reload.bat</h6><ol><li>start.bat :启动nginx(通过start.bat启动的nginx,千万不能多次启动,否则会出现多个nginx实例,这个时候stop来不及了 stop只能关闭最后一个,但是如果真的犯错了,怎么关闭以前呢:在任务栏,右击打开任务管理器==&gt;进入到详细服务列表,找到nginx服务,统统结束)</li><li>stop.bat :停用nginx(在start之后可以用)</li><li>reload.bat:重启nginx(在start之后可以用)</li><li>通过cmd执行start.bat来启动nginx启动之后,千万别关闭串口</li></ol><h6 id="_4-2-nginx出现访问不了的情况" tabindex="-1"><a class="header-anchor" href="#_4-2-nginx出现访问不了的情况" aria-hidden="true">#</a> 4.2)nginx出现访问不了的情况=&gt;</h6><ol><li>只有一种:配置出现问题=&gt;学会看日志: E:\\nginx\\logs\\error.log去看日志内容</li></ol><h4 id="_5-配置文件" tabindex="-1"><a class="header-anchor" href="#_5-配置文件" aria-hidden="true">#</a> 5.配置文件=&gt;</h4><h5 id="_5-1-配置文件位置" tabindex="-1"><a class="header-anchor" href="#_5-1-配置文件位置" aria-hidden="true">#</a> 5.1)配置文件位置:</h5><blockquote><p>E:\\nginx\\conf\\nginx.conf</p></blockquote><h5 id="_5-2-配置文件服务器配置部分解释" tabindex="-1"><a class="header-anchor" href="#_5-2-配置文件服务器配置部分解释" aria-hidden="true">#</a> 5.2)配置文件服务器配置部分解释=&gt;</h5><div class="language-bat line-numbers-mode" data-ext="bat"><pre class="language-bat"><code>server {
        listen       80;
        #//监听的域名
        //本地IP地址
        server_name  localhost;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
           #//如果是localhost 80端口   就访问根目录下的index.html
        location / {
            root   html;
            index  index.html index.htm;
        }
        //测试静态文件服务器配置(注意斜杠)
        location /xk {
              alias  E:/fyWebStrom/Xunke_Code/day7_27_28/public;
		}
		location /cross/ {
			proxy_pass  http://localhost:3000/;
			add_header  to http://localhost:3000;
		}
    }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-静态文件服务器配置-注意斜杠" tabindex="-1"><a class="header-anchor" href="#_5-3-静态文件服务器配置-注意斜杠" aria-hidden="true">#</a> 5.3)静态文件服务器配置(注意斜杠)</h5><h6 id="_5-3-1-方式一" tabindex="-1"><a class="header-anchor" href="#_5-3-1-方式一" aria-hidden="true">#</a> 5.3.1)方式一:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location /qn { alias  E:/fyWebStrom/Xunke_Code/day7_27_28/public;	}
  alias表示别名,意思就是当我们请求的uri里头包含了qn,那么就会自动去访问alias指向的路径下的文件
    eg:
    http://localhost/qn/test.html
    表示:请求alias路径下的test.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_5-3-2-方式二" tabindex="-1"><a class="header-anchor" href="#_5-3-2-方式二" aria-hidden="true">#</a> 5.3.2)方式二:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location  /qn{
    root E:/fyWebStrom/Xunke_Code/day7_27_28/public/Demo.html
    //表示根, 请求root路径下的qn文件夹下的test.html
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-跨域代理" tabindex="-1"><a class="header-anchor" href="#_6-跨域代理" aria-hidden="true">#</a> 6.跨域代理=&gt;</h4><h5 id="_6-1-配置文件配置" tabindex="-1"><a class="header-anchor" href="#_6-1-配置文件配置" aria-hidden="true">#</a> 6.1)配置文件配置:</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>server {
        listen       80;
        server_name  localhost;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        //nginx跨域配置
            location /cross/ {
        proxy_pass http://localhost:3000/;
        add_header to http://localhost:3000;
   } }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-配置proxy-pass代理转发四种方式" tabindex="-1"><a class="header-anchor" href="#_6-2-配置proxy-pass代理转发四种方式" aria-hidden="true">#</a> 6.2)配置proxy_pass代理转发四种方式=&gt;</h5><h6 id="_6-2-1-配置路径原理" tabindex="-1"><a class="header-anchor" href="#_6-2-1-配置路径原理" aria-hidden="true">#</a> 6.2.1)配置路径原理</h6><blockquote><p>在nginx中配置proxy_pass代理转发时，如果在proxy_pass后面的url加/，表示绝对根路径；如果没有/，表示相对路径，把匹配的路径部分也给代理走。</p></blockquote><p>假设下面四种情况分别用 http://192.168.1.1/proxy/test.html 进行访问:</p><h6 id="_6-2-1-第一种方法" tabindex="-1"><a class="header-anchor" href="#_6-2-1-第一种方法" aria-hidden="true">#</a> 6.2.1)第一种方法:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location /proxy/ {
    proxy_pass http://127.0.0.1/;
}
代理到URL：http://127.0.0.1/test.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_6-2-2-第二种方法-相对于第一种-最后少一个" tabindex="-1"><a class="header-anchor" href="#_6-2-2-第二种方法-相对于第一种-最后少一个" aria-hidden="true">#</a> 6.2.2)第二种方法（相对于第一种，最后少一个 / ）:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location /proxy/ {
    proxy_pass http://127.0.0.1;
}
代理到URL：http://127.0.0.1/proxy/test.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_6-2-3-第三种方法" tabindex="-1"><a class="header-anchor" href="#_6-2-3-第三种方法" aria-hidden="true">#</a> 6.2.3)第三种方法:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location /proxy/ {
    proxy_pass http://127.0.0.1/aaa/;
}
代理到URL：http://127.0.0.1/aaa/test.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_6-2-4-第四种方法-相对于第三种-最后少一个" tabindex="-1"><a class="header-anchor" href="#_6-2-4-第四种方法-相对于第三种-最后少一个" aria-hidden="true">#</a> 6.2.4)第四种方法(相对于第三种，最后少一个 / ）:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location /proxy/ {
    proxy_pass http://127.0.0.1/aaa;
}
代理到URL：http://127.0.0.1/aaatest.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-niginx配置文件及其跨域原理" tabindex="-1"><a class="header-anchor" href="#_7-niginx配置文件及其跨域原理" aria-hidden="true">#</a> 7.Niginx配置文件及其跨域原理=&gt;</h4><h6 id="_1-server表示启动一个代理服务器" tabindex="-1"><a class="header-anchor" href="#_1-server表示启动一个代理服务器" aria-hidden="true">#</a> ① server表示启动一个代理服务器</h6><h6 id="_2-该代理服务器也是静态文服-静态文件要通过代理服务器来访问" tabindex="-1"><a class="header-anchor" href="#_2-该代理服务器也是静态文服-静态文件要通过代理服务器来访问" aria-hidden="true">#</a> ② 该代理服务器也是静态文服 (静态文件要通过代理服务器来访问)</h6><pre><code>		   1)因为代理服务器只能监听代理服务器的端口
				  2)所以前端发出的所有请求一定是基于80端口去发出
	   			  3)这样子,前端的所有跨域请求才可以被监听到
				  4)才能实现 前端和代理服务器之间的不跨域
</code></pre><h6 id="_3-80-表示监听80端口-所以最终我们的前端资源一定是部署在80端口上" tabindex="-1"><a class="header-anchor" href="#_3-80-表示监听80端口-所以最终我们的前端资源一定是部署在80端口上" aria-hidden="true">#</a> ③ 80 表示监听80端口 所以最终我们的前端资源一定是部署在80端口上</h6><pre><code>		    1)通过相对路径 html
		  		 2)通过绝对路径  静态文服
</code></pre><h6 id="_4-location-cross" tabindex="-1"><a class="header-anchor" href="#_4-location-cross" aria-hidden="true">#</a> ④ location /cross</h6><pre><code>		  1)服务端的接口的uri ,不一定要cross(联想alias,它只是一个规则,并没有表示真正的意图)
				     http://localhost/cross/cross 后面的cross才是我们正要去访问的uri
</code></pre><h6 id="_5-proxy-pass" tabindex="-1"><a class="header-anchor" href="#_5-proxy-pass" aria-hidden="true">#</a> ⑤ proxy_pass</h6><p>​ 1) 表示我们真正想要请求的地址是......</p><h6 id="_6-add-header" tabindex="-1"><a class="header-anchor" href="#_6-add-header" aria-hidden="true">#</a> ⑥ add_header</h6><pre><code>		   2) 就是我们在请求成功之后 响应头要添加的内容
</code></pre><h6 id="_7练习" tabindex="-1"><a class="header-anchor" href="#_7练习" aria-hidden="true">#</a> ⑦练习:</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> http://localhost:81/cross/cross/get  (跨域不成功) 端口无法监听到
  http://localhost:81/cross1/cross/get (跨域不成功)找不到路径且端口也不正确
  http://localhost:80/cross/cross/get  (跨域成功)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53);function _(w,q){const a=o("ExternalLinkIcon");return i(),c("div",null,[u,s("blockquote",null,[s("p",null,[n("Nginx是一款"),s("a",r,[n("轻量级"),e(a)]),n("的"),s("a",d,[n("Web"),e(a)]),n(" 服务器/"),s("a",k,[n("反向代理"),e(a)]),n("服务器及"),s("a",v,[n("电子邮件"),e(a)]),n("（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，"),s("a",m,[n("并发"),e(a)]),n("能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、"),s("a",h,[n("京东"),e(a)]),n("、"),s("a",b,[n("新浪"),e(a)]),n("、"),s("a",g,[n("网易"),e(a)]),n("、"),s("a",f,[n("腾讯"),e(a)]),n("、"),s("a",x,[n("淘宝"),e(a)]),n("等。")])]),y])}const E=p(l,[["render",_],["__file","A_Nodebijizonggang.html.vue"]]);export{E as default};
