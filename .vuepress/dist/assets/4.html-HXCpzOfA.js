import{_ as t,o,c as e,b as n}from"./app-bTNKyK6n.js";const r={},i=n('<h1 id="浏览器是如何渲染ui的" tabindex="-1"><a class="header-anchor" href="#浏览器是如何渲染ui的" aria-hidden="true">#</a> 浏览器是如何渲染UI的？</h1><p>浏览器渲染 UI 的过程可以简单地概括为以下几个步骤：</p><ol><li><p><strong>构建 DOM 树（Document Object Model）</strong>：当浏览器接收到 HTML 文件时，会通过解析 HTML 标记和文本内容构建 DOM 树。DOM 树是一个表示文档结构的树形结构，其中每个节点代表文档中的一个元素、属性或文本。</p></li><li><p><strong>构建 CSSOM 树（CSS Object Model）</strong>：浏览器解析 CSS 文件，并根据 CSS 规则构建 CSSOM 树。CSSOM 树表示了文档中所有样式规则的层次结构。</p></li><li><p><strong>合并 DOM 树和 CSSOM 树</strong>：浏览器将 DOM 树和 CSSOM 树合并成一棵渲染树（Render Tree）。渲染树只包含需要显示在页面上的节点和样式信息，不包含不可见的节点（如 <code>&lt;head&gt;</code>、<code>&lt;script&gt;</code>）。</p></li><li><p><strong>计算布局（Layout）</strong>：浏览器根据渲染树的信息计算每个节点在页面上的几何布局，包括位置、大小、边距等信息。这个过程称为布局或回流（reflow）。</p></li><li><p><strong>绘制（Painting）</strong>：浏览器将每个节点根据其在布局阶段计算出的位置和大小信息绘制到屏幕上。这个过程称为绘制或重绘（repaint）。</p></li><li><p><strong>合成（Compositing）</strong>：如果页面中有多个图层，浏览器会将这些图层合成为一个整体显示在屏幕上，这个过程称为合成。</p></li><li><p><strong>动画和交互</strong>：如果页面中包含动画效果或用户交互，浏览器会根据相应的事件触发相应的操作，如执行 CSS 动画、处理鼠标点击等。</p></li></ol>',3),s=[i];function l(c,a){return o(),e("div",null,s)}const d=t(r,[["render",l],["__file","4.html.vue"]]);export{d as default};
